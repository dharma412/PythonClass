#!/usr/bin/env python
# $Id: //prod/main/sarf_centos/testlib/coeus1201/gui/services/wbrs_and_anti_malware.py#1 $

import time
from common.gui.guicommon import GuiCommon
import common.gui.guiexceptions as guiexceptions

class WbrsAndAntiMalware(GuiCommon):
    """*DEPRECATED* Use class `AntiMalwareAndReputation` instead.

    Keywords for Security Services -> Anti-Malware and Reputation
    """

    def get_keyword_names(self):
        return [
                "wbrs_and_anti_malware_edit_settings",
                "wbrs_and_anti_malware_update_now",
               ]
    def wbrs_and_anti_malware_edit_settings(self,
        mcafee=None,
        heuristic=None,
        sophos=None,
        webroot=None,
        threat_risk=None,
        max_object_size=None,
        wbrs=None,
        content_filtering=None,
        ):
        """*DEPRECATED* Use keyword `Anti Malware And Reputation Edit Settings` instead.

        Edit Web Reputation Filters and Anti Malware settings
        Parameters:
        - `mcafee`: Enable McAfee; accepted values:${True} and ${False}
        - `heuristic`: Enable Heuristic Scanning; can be set only when McAfee
           is enabled; accepted values:${True} and ${False}
        - `sophos`: Enable Sophos; accepted values:${True} and ${False}
        - `webroot`: Enable Webroot; accepted values:${True} and ${False}
        - `threat_risk`: Threat Risk Threshold; can be set only when Webroot
           is enabled. Valid range 51 through 100, recommended minimum 90.
        - `max_object_size`: Max. Object Size for Cisco IronPort DVS Engine.
           At least one of anti-malware engines (McAfee, Sophos, or Webroot)
           should be enabled.
           Value must be an integer from 1 to 256.
        - `wbrs`: Enable Web Reputation Filtering; accepted values:${True}
           and ${False}
        - `content_filtering`: Enable Content Reputation Filtering; content
           filtering can be set only when Web Reputation Filtering is enabled.
           Accepted values:${True} and ${False}

        Exceptions:
        - `GuiFeaturekeyMissingError`:in case feature key is expired or missing

        Examples:
        | WBRS and Anti Malware Edit Settings |
        | ... | mcafee=${False} |
        | ... | webroot=${False} |
        | ... | wbrs=${False} |

        | WBRS and Anti Malware Edit Settings |
        | ... | mcafee=${True} |
        | ... | heuristic=${False} |
        | ... | wbrs=${True} |
        | ... | content_filtering=${False} |

        | WBRS and Anti Malware Edit Settings |
        | ... | mcafee=${True} |
        | ... | heuristic=${True} |
        | ... | sophos=${True} |
        | ... | webroot=${True} |
        | ... | threat_risk=70 |
        | ... | max_object_size=33 |
        | ... | wbrs=${True} |
        | ... | content_filtering=${True} |

        """
        self._open_page()
        if mcafee  is not None or \
            heuristic  is not None or \
            sophos  is not None or \
            webroot  is not None or \
            threat_risk  is not None or \
            max_object_size  is not None or \
            wbrs  is not None or \
            content_filtering is not None:

            self._click_edit_global_settings_button()

            if mcafee is not None:
                self._set_mcafee(mcafee)

            if heuristic is not None:
                self._set_heuristic(heuristic)

            if sophos is not None:
                self._set_sophos(sophos)

            if webroot is not None:
                self._set_webroot(webroot)

            if threat_risk is not None:
                self._set_threat_risk(threat_risk)

            if max_object_size is not None:
                self._set_max_object_size(max_object_size)

            if content_filtering is not None:
                self._set_content_filtering(content_filtering)

            if wbrs is not None:
                self._set_wbrs(wbrs)

            self._click_submit_button(wait=False, accept_confirm_dialog=True)

    def wbrs_and_anti_malware_update_now(self):
        """*DEPRECATED* Use keyword `Anti Malware And Reputation Update Now` instead.

        Click 'Update Now' button to update 'Web Reputation and Anti-Malware Engine Updates'

        Example:
        | WBRS and Anti Malware Update Now |
        """

        update_now_button = "xpath=//input[@value='Update Now']"

        self._open_page()
        self._info("Clicking 'Update Now' button...")
        self.click_button(update_now_button)
        # Validate errors on the page
        self._check_action_result()

    def _open_page(self):
        """Open 'Web Reputation and Anti-Malware' page
        """
        self._navigate_to("Security Services", \
                         "Anti-Malware and Reputation")

    def _set_mcafee(self, enable):
        """Enable-Disable McAfee
        """
        self._mcafee_is_expired()
        CHECKBOX = "mcafee_enabled"

        if enable:
            self._info("Enabling McAfee ...")
            if not self._is_checked(CHECKBOX):
                self.click_element(CHECKBOX, "don't wait")
            self._accept_license_agreement()
        else:
            self._info("Disabling McAfee ...")
            self.unselect_checkbox(CHECKBOX)

    def _set_heuristic(self, heuristic):
        self._mcafee_is_expired()
        CHECKBOX = "mcafee_heuristics_enabled"

        if heuristic:
            self.select_checkbox(CHECKBOX)
            self._info("Enabled 'Heuristic Scanning'")
        else:
            self.unselect_checkbox(CHECKBOX)
            self._info("Disabled 'Heuristic Scanning'")

    def _set_sophos(self, enable):
        """Enable-Disable Sophos
        """
        self._sophos_is_expired()
        CHECKBOX = "sophos_enabled"

        if enable:
            self._info("Enabling Sophos ...")
            if not self._is_checked(CHECKBOX):
                self.click_element(CHECKBOX, "don't wait")
                self._accept_license_agreement()
        else:
            self._info("Disabling Sophos ...")
            self.unselect_checkbox(CHECKBOX)

    def _set_webroot(self, enable):
        """Enable-Disable Webroot
        """
        self._webroot_is_expired()
        CHECKBOX = "webroot_enabled"

        if enable:
            self._info("Enabling Webroot ...")
            if not self._is_checked(CHECKBOX):
                self.click_element(CHECKBOX, "don't wait")
            self._accept_license_agreement()
        else:
            self._info("Disabling Webroot ...")
            self.unselect_checkbox(CHECKBOX)

    def _set_threat_risk(self, threshold):
        self._webroot_is_expired()
        FIELD = "xpath=//input[@id='webroot_threat_risk_threshold']"
        self.input_text(FIELD, threshold)
        self._info("Set Threat Risk Threshold to %s" % threshold)

    def _set_max_object_size(self, size):

        FIELD = "xpath=//input[@id='dvs_sseMaximumSizeToScanMb']"

        self.input_text(FIELD, size)
        self._info("Set Max. Object Size to %s" % size)

    def _set_wbrs(self, enable):
        """Enable-Disable Web Reputation Filter settings
        """
        self._wbrs_is_expired()

        CHECKBOX = "xpath=//input[@id='wbrs_enabled']"

        if enable:
            self._info("Enabling WBRS ...")
            self.select_checkbox(CHECKBOX)
            self._accept_license_agreement()
        else:
            self._info("Disabling WBRS ...")
            self.unselect_checkbox(CHECKBOX)

    def _set_content_filtering(self, enable):
        """Enable-Disable Sophos
        """
        self._wbrs_is_expired()
        CHECKBOX = "xpath=//input[@id='adaptivescanning_enabled']"

        if enable and not self._is_checked(CHECKBOX):
            self._info("Enabling Content Reputation Filterings ...")
            self.click_element(CHECKBOX, "don't wait")
        if not enable and self._is_checked(CHECKBOX):
            self._info("Disabling Content Reputation Filtering ...")
            self.click_element(CHECKBOX, "don't wait")

    def _click_edit_global_settings_button(self):
        """Click 'Edit Global Settings...' button"""

        edit_settings_button = "xpath=//input[@value='Edit Global Settings...']"
        self.click_button(edit_settings_button)
        self._info("Clicked 'Edit Global Settings...' button")

    def _mcafee_is_expired(self):
        """
        If the feature is expired, raises the corresponding exception
        """
        if self._is_text_present("Feature Key for McAfee has "\
            "expired or is unavailable."):
            raise guiexceptions.GuiFeaturekeyMissingError\
                ("Feature key: 'McAfee' is expired or unavailable")

    def _sophos_is_expired(self):
        """
        If the feature is expired, raises the corresponding exception
        """
        if self._is_text_present("Feature Key for Sophos has "\
            "expired or is unavailable."):
            raise guiexceptions.GuiFeaturekeyMissingError\
                ("Feature key: 'Sophos' is expired or unavailable")

    def _webroot_is_expired(self):
        """
        If the feature is expired, raises the corresponding exception
        """
        if self._is_text_present("Feature key for this setting has "\
            "expired or is unavailable."):
            raise guiexceptions.GuiFeaturekeyMissingError\
                ("Feature key: 'Webroot' is expired or unavailable")

    def _wbrs_is_expired(self):
        """
        If the feature is expired, raises the corresponding exception
        """
        if self._is_text_present \
            ("Feature Key for Web Reputation Filtering has "\
            "expired or is unavailable."):
            raise guiexceptions.GuiFeaturekeyMissingError\
                ("Feature key: 'wbrs' is expired or unavailable")

    def _accept_license_agreement(self):
        """
        If license agreement needs to be accepted, accept it
        """
        LICENSE_TEXT = "xpath=//dl[contains(dt, ' License Agreement')]"
        ACCEPT_LICENSE_BUTTON = "xpath=//input[@value='Accept']"

        time.sleep(2) # to avoid time races

        if self._is_element_present(LICENSE_TEXT) and \
                self._is_element_present(ACCEPT_LICENSE_BUTTON):
            self.click_button(ACCEPT_LICENSE_BUTTON)
            self._info("Clicked 'Accept' for License Agreement")
            self._click_edit_global_settings_button()
