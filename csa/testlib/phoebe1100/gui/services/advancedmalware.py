#!/usr/bin/env python -tt
# $Id: //prod/main/sarf_centos/testlib/phoebe1100/gui/services/advancedmalware.py#1 $
# $DateTime: 2019/03/22 01:36:06 $
# $Author: aminath $

import functools
from common.gui.guicommon import GuiCommon
import common.gui.guiexceptions as guiexceptions

ENABLE_BUTTON = "//input[@type='submit' and @value='Enable...']"
EDIT_SETTINGS_BUTTON = "//input[@type='submit' and @value='Edit Global Settings...']"
CHECK_AMP_STATUS = "//input[@type='button' and @value='Check AMP Status']"
UPDATE_STATUS = "//input[@type='button' and @value='Update Status']"
ENABLE_REPUTATION_CHECKBOX = "//input[contains(@id, 'rep_enabled') and @type='checkbox']"
ENABLE_ANALYSIS_CHECKBOX = "//input[contains(@id, 'analysis_enabled') and @type='checkbox']"
SUBMIT_BUTTON = "//input[@type='submit' and @name='action:EditSettings']"
CANCEL_BUTTON = "//input[@type='submit' and @name='action:Cancel']"
DECLINE_LICENSE_BUTTON = "//input[@value='Decline']"
ACCEPT_LICENCE_BUTTON = "//input[@value='Accept']"
ADVANCED_KEY = "//div[@id='arrow_closed']"
ADVANCED_REPUTATION_KEY = "//div[@id='rep_arrow_closed']"
ADVANCED_ANALYSIS_KEY = "//div[@id='analysis_arrow_closed']"
CLOUD_DOMAIN = "//input[@id='rep_cloud_domain']"
FILE_REPUTATION_SERVER_DROPDOWN = "//select[@id='rep_server_list']"
CLOUD_SERVER_POOL = "//input[@id='rep_cloud_server_pool']"
FILE_ANALYSIS_SERVER_URL = "//input[@id='analysis_server_url']"
FILE_ANALYSIS_SERVER_DROPDOWN = "//select[@id='analysis_server_list']"
CERT_TYPE_DROPDOWN = "//select[@id='cert_type']"
CHOOSE_CERT_FILE = "//input[@id='cert_file']"
UPLOAD_CERT_FILE = "//input[@id='upload_cert']"

USE_SSL_CHECKBOX = "//input[contains(@id, 'rep_ssl_enabled') and @type='checkbox']"
PROXY_SERVER = "//input[@id='rep_tunnel_proxy_server']"
PROXY_PORT = "//input[@id='rep_tunnel_proxy_port']"
PROXY_USERNAME = "//input[@id='rep_proxy_username']"
PROXY_PASSWORD = "//input[@id='rep_proxy_passwd']"
PROXY_RETYPE_PASSWORD = "//input[@id='rep_proxy_retype_password']"
REP_THRESHOLD_DEFAULT = "//input[@type='radio' and @value='rep_threshold_default']"
REP_THRESHOLD_CUSTOM = "//input[@type='radio' and @value='rep_threshold_custom']"
REP_THRESHOLD_TEXT = "//input[@id='rep_threshold_custom_text']"
HEARTBEAT_INTERVAL = ("//input[@id='rep_heartbeat_interval']")
REPUTATION_THRESHOLD = ("//input[@id='rep_threshold']")
QUERY_TIMEOUT = ("//input[@id='rep_query_timeout']")
PROCESSING_TIMEOUT = ("//input[@id='scan_timeout']")
STATUS_INFO_FILE_REPUTATION = "//table[@class='pairs']/tbody/tr[1]/td"
STATUS_INFO_FILE_ANALYSIS = "//table[@class='pairs']/tbody/tr[2]/td"
RELAX_CERTIFICATE = "//input[@id='rep_tunnel_relax_cert_verification']"

NO_FKEY_MARK = 'The feature key for this feature has expired or is unavailable'
ENABLE_MICROSOFT_CHECKBOX = "//input[@id='MSEXE']"
ENABLE_ADOBEPDF_CHECKBOX = "//input[@id='PDF']"
ENABLE_MICROSOFT2007OPENXML_CHECKBOX = "//input[@id='NEW_OFFICE']"
ENABLE_MICROSOFT97TO2004OLE_CHECKBOX = "//input[@id='MSOLE2']"


def check_advancedmalware_feature(need_to_raise_exc):
    """This decorator is used to navigate and check Advanced-malware features.

    *Parameters:*
    - `need_to_raise_exc`: whether to raise GuiFeatureDisabledError if
    advanced malware protection feature is disabled. Either True or False

    *Exceptions:*
    - `GuiFeatureDisabledError`: if corresponding feature is disabled
    and need_to_raise_exc is set to True
    """

    def decorator(func):
        @functools.wraps(func)
        def worker(self, *args, **kwargs):
            if not self.advancedmalware_is_enabled():
                if need_to_raise_exc:
                    raise guiexceptions.GuiFeatureDisabledError(
                        'Advanced Malware feature is not enabled')
            return func(self, *args, **kwargs)

        return worker

    return decorator


class Advancedmalware(GuiCommon):
    """Keywords for ESA GUI interaction with Security Services ->
    File Reputation and Analysis page.
    """

    def get_keyword_names(self):
        return ['advancedmalware_is_enabled',
                'advancedmalware_enable',
                'advancedmalware_disable',
                'advancedmalware_edit_settings',
                'validate_amp_license_expiry',
                'advancedmalware_get_details',
                'validate_amp_monitor_pages',
                'advancedmalware_edit_settings_custom',
                'advancedmalware_filetypessupport'
                ]

    def _open_page(self):
        PAGE_PATH = ('Security Services', 'File Reputation and Analysis')
        self._debug('Opening "%s" page' % (' -> '.join(PAGE_PATH),))
        is_navigation_successful = True
        try:
            self._navigate_to('Security Services',
                              "File Reputation and Analysis")
        except Exception as e:
            print e
            is_navigation_successful = False
        if self._is_text_present(NO_FKEY_MARK) or not is_navigation_successful:
            raise guiexceptions.GuiFeaturekeyMissingError(
                '"%s" feature '
                'can not be reached because the corresponding feature key is '
                'not installed' % (PAGE_PATH[1],))

    def advancedmalware_is_enabled(self):
        """Return advanced-malware feature state

        *Return:*
        True if advanced-malware feature is enabled or False otherwise

        *Exceptions:*
        - `GuiFeaturekeyMissingError`: if feature key for the
        particular provider is not installed

        *Examples:*
        | ${amp_state}= | Advancedmalware Is Enabled |
        """

        self._open_page()
        DISABLED_MARK = 'is currently disabled'
        return not self._is_text_present(DISABLED_MARK)

    @check_advancedmalware_feature(False)
    def advancedmalware_enable(self):
        """Enable advanced-malware feature.
        Ignore state when feature is already enabled.

        *Parameters:*
        - None
        *Return:*
        - True if EULA is encountered
        *Examples:*
        | Advancedmalware Enable |
        """
        LICENSE_AGREEMENT_MARK = 'License Agreement'
        self._open_page()
        EULA = False
        if self._is_element_present(ENABLE_BUTTON):
            self.click_button(ENABLE_BUTTON)
            if self._is_text_present(LICENSE_AGREEMENT_MARK):
                self.click_button(ACCEPT_LICENCE_BUTTON)
                self._check_action_result()
                EULA = True
                return EULA
        else:
            raise guiexceptions.GuiApplicationError(
                'Advanced malware disabled.')

    @check_advancedmalware_feature(False)
    def advancedmalware_disable(self, service=None):
        """Disable advanced-malware file reputation feature.
        Ignore state when feature is already disabled.

        *Parameters:*
        - `service`: name of advanced-malware service to be disabled.
        Either file_reputation or file_analysis, Default is file_reputation

        *Examples:*
        | Advancedmalware Disable |
        | Advancedmalware Disable | file_reputation |
        """
        service = service or "file_reputation"
        self._open_page()
        if self._is_element_present(EDIT_SETTINGS_BUTTON):
            self.click_button(EDIT_SETTINGS_BUTTON)
        else:
            raise guiexceptions.GuiFeaturekeyMissingError(
                '"%s" naviation to '
                'EDIT SETTING button failed, possible exception. ')

        if service == "file_reputation":
            self._unselect_checkbox(ENABLE_REPUTATION_CHECKBOX)
        elif service == "file_analysis":
            self._unselect_checkbox(ENABLE_ANALYSIS_CHECKBOX)
            if self._is_element_present(ADVANCED_REPUTATION_KEY):
                self.click_button(ADVANCED_REPUTATION_KEY, "don't wait")
            else:
                self.click_button(ADVANCED_KEY, "don't wait")
            if self._is_element_present(USE_SSL_CHECKBOX):
                self._unselect_checkbox(USE_SSL_CHECKBOX)
        self._click_submit_button()

    @check_advancedmalware_feature(False)
    def advancedmalware_filetypessupport(self, **kwargs):
        """Enable/Disable advanced-malware file type support feature.

        *Parameters:*
        - `msexe`: microsoftexecutables type support. Value Either Enable or Disable
        - `pdf`: adobepdf type support. Value Either Enable or Disable
        - `new_office`: microsoft 2007 openxml type support. Value Either Enable or Disable
        - `msole`: microsoft 97-2004 ole type support. Value Either Enable or Disable

        *Examples:*
        | Advancedmalware Filetypessupport | msexe=Disable | new_office=Enable |
        | Advancedmalware Filetypessupport | msexe=Enable |
        | Advancedmalware Filetypessupport | pdf=Enable |
        | Advancedmalware Filetypessupport | msole=Enable |
        """
        if self._is_element_present(EDIT_SETTINGS_BUTTON):
            self.click_button(EDIT_SETTINGS_BUTTON)
        else:
            raise guiexceptions.GuiFeaturekeyMissingError(
                '"%s" naviation to '
                'EDIT SETTING button failed, possible exception. ')

        filetype_checkbox_dict = {"msexe": ENABLE_MICROSOFT_CHECKBOX,
                                  "pdf": ENABLE_ADOBEPDF_CHECKBOX,
                                  "new_office": ENABLE_MICROSOFT2007OPENXML_CHECKBOX,
                                  "msole": ENABLE_MICROSOFT97TO2004OLE_CHECKBOX}

        # kwargs = self._parse_args(args)

        for key in kwargs:
            if key not in filetype_checkbox_dict:
                raise ValueError('%s Key not present in the list' % key)
            else:
                if kwargs[key] == "Enable":
                    self._select_checkbox(filetype_checkbox_dict[key])
                elif kwargs[key] == "Disable":
                    self._unselect_checkbox(ENABLE_MICROSOFT_CHECKBOX)
                else:
                    raise ValueError(
                        'Invalid option for %s key, Valid options are Enable/Disable' % key)

        self._click_submit_button()

    @check_advancedmalware_feature(True)
    def advancedmalware_edit_settings(self, cloud_domain=None,
                                      cloud_server_pool=None,
                                      heartbeat_interval=None,
                                      reputation_threshold=None,
                                      query_timeout=None,
                                      processing_timeout=None,
                                      file_analysis_server_url=None,
                                      file_reputation_server_select=None,
                                      file_analysis_server_select=None,
                                      ):
        """Edit Advanced-malware settings without using SSL (to be used with 8.5.5 builds)

        *Parameters:*
        - `cloud_domain`: cloud domain value to be entered.
        - `cloud_server_pool`: cloud server pool
        - `file_analysis_server_url`: file analysis server url
        - `heartbeat_interval`: heartbeat interval in sec
        - `reputation_threshold`: reputation threshold, range 1-100
        - `query_timeout`: query timeout, in sec
        - `processing_timeout`: processing time out, in sec

        *Exceptions:*
        - `GuiFeatureDisabledError`: if corresponding feature is disabled
        - `ValueError`: if provider name is not correct

        *Examples:*
        | Advancedmalware Edit Settings | cloud_domain = a.immunet.com | query_timeout = 100 |
        """
        try:
            LICENSE_AGREEMENT_MARK = 'License Agreement'
            self._open_page()
            if self._is_element_present(EDIT_SETTINGS_BUTTON):
                self.click_button(EDIT_SETTINGS_BUTTON)
                if self._is_text_present(LICENSE_AGREEMENT_MARK):
                    self.click_button(ACCEPT_LICENCE_BUTTON)
                    self._check_action_result()
                    if self._is_element_present(EDIT_SETTINGS_BUTTON):
                        self.click_button(EDIT_SETTINGS_BUTTON)
                self.click_button(ADVANCED_REPUTATION_KEY, "don't wait")
                # self.input_text(CLOUD_DOMAIN, cloud_domain)
                if self._is_element_present(FILE_REPUTATION_SERVER_DROPDOWN):
                    file_reputation_server_select = \
                        file_reputation_server_select or "Private reputation cloud"
                    self.select_from_list(FILE_REPUTATION_SERVER_DROPDOWN,
                                          file_reputation_server_select)
                    if self._is_element_present(CLOUD_SERVER_POOL):
                        self.input_text(CLOUD_SERVER_POOL, cloud_server_pool)

                if self._is_element_present(FILE_ANALYSIS_SERVER_DROPDOWN):
                    file_analysis_server_select = \
                        file_analysis_server_select or "Private analysis cloud"
                    self.select_from_list(FILE_ANALYSIS_SERVER_DROPDOWN,
                                          file_analysis_server_select)
                    if self._is_element_present(FILE_ANALYSIS_SERVER_URL):
                        self.input_text(FILE_ANALYSIS_SERVER_URL,
                                        file_analysis_server_url)
                if self._is_element_present(REPUTATION_THRESHOLD):
                    self.input_text(REPUTATION_THRESHOLD, reputation_threshold)
                else:
                    self._click_radio_button(REP_THRESHOLD_CUSTOM)
                    self.input_text(REP_THRESHOLD_TEXT, reputation_threshold)
                if self._is_element_present(USE_SSL_CHECKBOX):
                    self._unselect_checkbox(USE_SSL_CHECKBOX)
                self.input_text(HEARTBEAT_INTERVAL, heartbeat_interval)
                self.input_text(QUERY_TIMEOUT, query_timeout)
            self.input_text(PROCESSING_TIMEOUT, processing_timeout)
            self._click_submit_button()
        except Exception, e:
            raise guiexceptions.GuiFeaturekeyMissingError(
                'Error caught: %s' % e)

    def validate_amp_license_expiry(self):
        """ Validate whether the amp license feature key is active or it has been expired
        *Return:*
        True if advanced-malware protection feature key is expired or False otherwise

        *Exceptions:*
        - `GuiFeaturekeyMissingError`: if feature key for the
        particular provider is not installed

        *Examples:*
        | ${amp_state}= | Validate Amp License Expiry |
        """
        PAGE_PATH = ('Security Services', 'File Reputation and Analysis')
        self._debug('Opening "%s" page' % (' -> '.join(PAGE_PATH),))
        try:
            try:
                self._navigate_to('Security Services',
                                  "File Reputation and Analysis")
            except Exception as e:
                print e
            if self._is_text_present(NO_FKEY_MARK):
                return True
            else:
                raise guiexceptions.GuiApplicationError(
                    'Advanced Malware Feature Key '
                    ' is still active and it has not been expired.')
        except:
            guiexceptions.GuiFeaturekeyMissingError(
                '"%s" feature '
                'can not be reached because the corresponding feature key is '
                'not installed and amp feature is missing from the current build'
                % (PAGE_PATH[1],))

    @check_advancedmalware_feature(True)
    def advancedmalware_get_details(self, service):
        """Return advanced malware file reputation/analysis status details
        *Parameters:*
        - 'service': name of the amp service: 'File Reputation' or 'File Analysis'

        *Exceptions:*
        - `GuiFeatureDisabledError`: if corresponding feature is disabled

        *Return:*
        Dictionary which items are:
        | `File Reputation` | file reputation status, either Enabled  or it will throw an error
                              in case the corresponding feature is disabled |
        | `File Analysis` | file analysis status, either Enabled or Disabled |

        *Examples:*
        | ${details}= | Advancedmalware Get Details |
        | ${amp_reputation_status}= | Get From Dictionary | ${details} | File Reputation |
        | ${amp_analysis_status}= | Get From Dictionary | ${details} | File Analysis |
        """

        PAGE_PATH = ('Security Services', 'File Reputation and Analysis')
        self._debug('Opening "%s" page' % (' -> '.join(PAGE_PATH),))
        details_dict = {}
        details_dict['File Reputation'] = self.get_text(
            STATUS_INFO_FILE_REPUTATION)
        details_dict['File Analysis'] = self.get_text(STATUS_INFO_FILE_ANALYSIS)
        return str(details_dict[service])

    @check_advancedmalware_feature(True)
    def validate_amp_monitor_pages(self):
        """Return True if all the amp pages are present.
        Paths to validate:
                Monitor -> Advanced Malware Protection
                Monitor -> File Analysis
                Monitor -> Amp Verdict Updates
        *Parameters:*
            - none
        *Exceptions:*
                - `GuiFeaturekeyMissingError`: if amp pages are missing under monitor Tab
        *Return:*
            True in case all amp pages under Monitor Tab are intact or raise exception otherwise
        *Examples:*
            | ${details}= | Validate Amp Monitor Pages |
        """
        is_navigation_successful = True
        try:
            self._navigate_to('Monitor', 'Advanced Malware Protection')
            self._navigate_to('Monitor', 'File Analysis')
            self._navigate_to('Monitor', 'AMP Verdict Updates')
            return True
        except Exception as e:
            print e
            is_navigation_successful = False
        if not is_navigation_successful:
            raise guiexceptions.GuiFeaturekeyMissingError(
                'Amp pages are missing under Monitor Tab')

    @check_advancedmalware_feature(True)
    def advancedmalware_edit_settings_custom(self, cloud_domain=None,
                                             cloud_server_pool=None,
                                             file_analysis_server_url=None,
                                             use_ssl=None,
                                             proxy_server=None,
                                             proxy_port=None,
                                             proxy_username=None,
                                             proxy_password=None,
                                             relax_certificate=None,
                                             heartbeat_interval=None,
                                             use_reputation_threshold_default=None,
                                             reputation_threshold=None,
                                             query_timeout=None,
                                             processing_timeout=None,
                                             file_analysis_server_select=None,
                                             certificate_option=None,
                                             cert_path=None,
                                             file_reputation_server_select=None):
        """Edit Advanced-malware settings with custom options (to be used with 8.5.6 builds and onwards)

        *Parameters:*
        - `cloud_domain`: cloud domain value to be entered.
        - `cloud_server_pool`: cloud server pool
        - `file_analysis_server_url`: file analysis server url
        - `use_ssl`: use ssl communication for file reputation: True, False or None.
        - `proxy_server`: proxy server url- An http/https URL must contain a well-formed
                          hostname or IPv4 address and may not contain a port or path
                          information. Otherwise error will be thrown from ESA.
        - `proxy_port`: proxy server port
        - `proxy_username`: proxy server user name
        - `proxy_password`: proxy server password
        - `relax_certificate`: None
        - `heartbeat_interval`: heartbeat interval in sec
        - `use_repuatation_threshold_default`: to Use Value from Cloud Service for reputation threshold:
                                               YES or NO. Default value is 60.
        - `reputation_threshold`: reputation threshold, range 1-100
        - `query_timeout`: query timeout, in sec
        - `processing_timeout`: processing time out, in sec
        - `file_analysis_server_select`: select the analysis server
                                         1.AMERICAS (https://panacea.threatgrid.com)
                                         2.Private Cloud
        - `certificate_option`: cetificate option; provided Private Cloud is selected
                                1.Use Cisco Default Certificate Authority
                                2.Use Uploaded Certificate Authority
        - `cert_path`: path of the certificate to upload

        *Exceptions:*
        - `GuiFeatureDisabledError`: if corresponding feature is disabled
        - `ValueError`: if provider name is not correct

        *Examples:*
        | Advancedmalware Edit Settings Custom | a.immunet.com | #cloud_domain |
        | ... | cloud-sa.amp.sourcefire.com | #cloud_server_pool |
        | ... | https://private.threatgrid.com | #file_analysis_server_url |
        | ... | True | #use_ssl |
        | ... | http://www.test_proxy.com | #proxy_server |
        | ... | 43 | #proxy_port |
        | ... | admin | #proxy_username |
        | ... | ironport | #proxy_password |
        | ... | None | #relax_certificate |
        | ... | 15 | #heartbeat_interval |
        | ... | True | #use_repuatation_threshold_default |
        | ... | 70 | #reputation_threshold |
        | ... | 100 | #query_timeout |
        | ... | 111 | #processing_timeout |
        | ... | Private Cloud | #file_analysis_server_select |
        | ... | Use Uploaded Certificate Authority | #certificate_option |
        | ... | ${CERT_PATH} | #cert_path |

        *Note:*
        Must follow the order of inputs

        """
        try:
            LICENSE_AGREEMENT_MARK = 'License Agreement'
            self._open_page()
            if self._is_element_present(EDIT_SETTINGS_BUTTON):
                self.click_button(EDIT_SETTINGS_BUTTON)
                if self._is_text_present(LICENSE_AGREEMENT_MARK):
                    self.click_button(ACCEPT_LICENCE_BUTTON)
                    self._check_action_result()
                    if self._is_element_present(EDIT_SETTINGS_BUTTON):
                        self.click_button(EDIT_SETTINGS_BUTTON)
                if self._is_element_present(ADVANCED_KEY):
                    self.click_button(ADVANCED_KEY, "don't wait")
                elif self._is_element_present(ADVANCED_REPUTATION_KEY):
                    self.click_button(ADVANCED_REPUTATION_KEY, "don't wait")
                    self.click_button(ADVANCED_ANALYSIS_KEY, "don't wait")
                # self.input_text(CLOUD_DOMAIN, cloud_domain)
                if self._is_element_present(FILE_REPUTATION_SERVER_DROPDOWN):
                    file_reputation_server_select = \
                        file_reputation_server_select or "Private reputation cloud"
                    self.select_from_list(FILE_REPUTATION_SERVER_DROPDOWN,
                                          file_reputation_server_select)
                    if self._is_element_present(CLOUD_SERVER_POOL):
                        self.input_text(CLOUD_SERVER_POOL, cloud_server_pool)
                if self._is_element_present(FILE_ANALYSIS_SERVER_DROPDOWN):
                    file_analysis_server_select = \
                        file_analysis_server_select or "Private analysis cloud"
                    self.select_from_list(FILE_ANALYSIS_SERVER_DROPDOWN,
                                          file_analysis_server_select)
                    if self._is_element_present(FILE_ANALYSIS_SERVER_URL):
                        self.input_text(FILE_ANALYSIS_SERVER_URL,
                                        file_analysis_server_url)
                if self._is_element_present(CERT_TYPE_DROPDOWN):
                    certificate_option = \
                        certificate_option or "Use Cisco Default Certificate Authority"
                    self.select_from_list(CERT_TYPE_DROPDOWN,
                                          certificate_option)
                    # if self._is_text_present('Certificate File'):
                    if self._is_visible(CHOOSE_CERT_FILE):
                        self.input_text(CHOOSE_CERT_FILE, cert_path)
                        self.click_button(UPLOAD_CERT_FILE)
                if self._is_element_present(USE_SSL_CHECKBOX):  # new
                    if use_ssl == True:
                        self._select_checkbox(USE_SSL_CHECKBOX)
                        self.input_text(PROXY_SERVER, proxy_server)
                        self.input_text(PROXY_PORT, proxy_port)
                        self.input_text(PROXY_USERNAME, proxy_username)
                        self.input_text(PROXY_PASSWORD, proxy_password)
                        self.input_text(PROXY_RETYPE_PASSWORD, proxy_password)
                        if relax_certificate == True:
                            self._select_checkbox(RELAX_CERTIFICATE)
                        elif relax_certificate == False:
                            self._unselect_checkbox(RELAX_CERTIFICATE)
                    elif use_ssl == False:
                        self._unselect_checkbox(USE_SSL_CHECKBOX)
                self.input_text(HEARTBEAT_INTERVAL, heartbeat_interval)
                if self._is_element_present(REP_THRESHOLD_CUSTOM):
                    if use_reputation_threshold_default:
                        self._click_radio_button(REP_THRESHOLD_DEFAULT)
                    else:
                        self._click_radio_button(REP_THRESHOLD_CUSTOM)
                        self.input_text(REP_THRESHOLD_TEXT,
                                        reputation_threshold)
                else:
                    self.input_text(REPUTATION_THRESHOLD, reputation_threshold)
                self.input_text(QUERY_TIMEOUT, query_timeout)
            self.input_text(PROCESSING_TIMEOUT, processing_timeout)
            self._click_submit_button()
        except Exception, e:
            raise guiexceptions.ConfigError('Exception caught: %s' % e)
