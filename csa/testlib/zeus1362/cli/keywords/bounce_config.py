#!/usr/bin/env python
# $Id: //prod/main/sarf_centos/testlib/zeus1362/cli/keywords/bounce_config.py#1 $ $DateTime: 2020/06/10 22:29:20 $ $Author: sarukakk $

from common.cli.clicommon import (CliKeywordBase, DEFAULT)
from sal.containers.yesnodefault import YES, NO, is_yes

class BounceConfig(CliKeywordBase):
    """Configure the behavior of bounces for bounce profile."""

    def get_keyword_names(self):
        return ['bounce_config_new',
                'bounce_config_edit',
                'bounce_config_delete']

    def bounce_config_new(self, name,
                          max_retries=DEFAULT,
                          max_queue_lifetime=DEFAULT,
                          initial_retry=DEFAULT,
                          max_retry_timeout=DEFAULT,
                          send_bounces_all='yes',
                          use_dsn_bounce_format='yes',
                          dsn_subject=DEFAULT,
                          parse_dsn='no',
                          send_warnings='no',
                          warnings_subject=DEFAULT,
                          warnings_interval=DEFAULT,
                          send_warnings_count=DEFAULT,
                          send_warning_to_alt='no',
                          alt_address=DEFAULT):
        """Create a new profile.

        bounceconfig > new

        Parameters:
        - `name`: name of the profile.
        - `max_retries`: Maximum number of times to reattempt a delivery.
        - `max_queue_lifetime`: Maximum number of seconds a message may stay in
          the queue.
        - `initial_retry`:  Number of seconds to wait before first trying to
          redeliver a message.
        - `max_retry_timeout`: Maximum number of seconds to wait before
          attempting a redelivery.
        - `send_bounces_all`: Whether or not to send hard bounces
          back to the sender. (Yes/No -- for non-Default profiles, also
          "Default").
        - `use_dsn_bounce_format`: Whether or not to send hard bounces
          in DSN format. (Yes/No -- for non-Default profiles, also "Default").
        - `dsn_subject`: Subject for delay DSN messages.
        - `parse_dsn`: Whether or not to parse the DSN "Status" field received
          from bounce responses to include in the DSN generated by the appliance.
        - `send_warnings`: Whether or not to send soft warnings back to the
          sender (Yes/No -- for non-Default profiles, also "Default").
        - `warnings_subject`: Subject for bounce DSN messages.
        - `warnings_interval`: inimum number of seconds to wait before sending
          a new warning message.
        - `send_warnings_count`: Maximum number of warnings to send.
        - `send_warning_to_alt`: Whether or not to send hard bounce messages to
          an alternate address, instead of the sender.
        - `alt_address`: email address to send hard bounce and delay warning.

        Examples:
        | BounceConfig New | profile1 |

        | Bounce Config New | profile2 |
        | ... | max_queue_lifetime=234 |
        | ... | send_warning_to_alt=YES |
        | ... | alt_address=test@test.com |
        | ... | send_warnings=YES |
        | ... | warnings_subject=test234_subj |
        | ... | warnings_interval=100 |
        """

        input_dict = {
            'name': name,
            'send_warning_to_alt': self._process_yes_no(send_warning_to_alt),
            'send_warnings': send_warnings,
            'send_bounces_all': send_bounces_all,
            'max_retries': max_retries,
            'max_queue_lifetime': max_queue_lifetime,
            'initial_retry': initial_retry,
            'max_retry_timeout': max_retry_timeout
        }

        if is_yes(send_bounces_all):
            input_dict.update({'use_dsn_bounce_format': self._process_yes_no(use_dsn_bounce_format)})

            if is_yes(use_dsn_bounce_format):
                input_dict.update({'dsn_subject': dsn_subject,
                                   'parse_dsn': self._process_yes_no(parse_dsn)})

        if is_yes(send_warnings):
                input_dict.update({'warnings_subject': warnings_subject,
                                'warnings_interval': warnings_interval,
                                'send_warnings_count': send_warnings_count})

        if is_yes(send_warning_to_alt):
            input_dict.update({'alt_address': alt_address})

        self._cli.bounceconfig().new(input_dict)

    def bounce_config_edit(self, prof_numb,
                           max_retries=DEFAULT,
                           max_queue_lifetime=DEFAULT,
                           initial_retry=DEFAULT,
                           max_retry_timeout=DEFAULT,
                           send_bounces_all='yes',
                           use_dsn_bounce_format='yes',
                           dsn_subject=DEFAULT,
                           parse_dsn='no',
                           send_warnings='no',
                           warnings_subject=DEFAULT,
                           warnings_interval=DEFAULT,
                           send_warnings_count=DEFAULT,
                           send_warning_to_alt='no',
                           alt_address=DEFAULT,
                           host_initial_retry=DEFAULT,
                           host_max_retry_timeout=DEFAULT,
                           bounced_msg_size=DEFAULT):
        """Edit the profile.

        bounceconfig > edit

        Parameters:
        - `prof_numb`: name of the profile to edit.
        - `max_retries`: Maximum number of times to reattempt a delivery.
        - `max_queue_lifetime`: Maximum number of seconds a message may stay in
          the queue.
        - `initial_retry`:  Number of seconds to wait before first trying to
          redeliver a message.
        - `max_retry_timeout`: Maximum number of seconds to wait before
          attempting a redelivery.
        - `send_bounces_all`: Whether or not to send hard bounces back to the
          sender. (Yes/No -- for non-Default profiles, also "Default").
        - `use_dsn_bounce_format`: Whether or not to send hard bounces
          in DSN format. (Yes/No -- for non-Default profiles, also "Default").
        - `dsn_subject`: Subject for delay DSN messages.
        - `parse_dsn`: Whether or not to parse the DSN "Status" field received
          from bounce responses to include in the DSN generated by the appliance.
        - `send_warnings`: Whether or not to send soft warnings back to the
          sender (Yes/No -- for non-Default profiles, also "Default").
        - `warnings_subject`: Subject for bounce DSN messages.
        - `warnings_interval`: inimum number of seconds to wait before sending
          a new warning message.
        - `send_warnings_count`: Maximum number of warnings to send.
        - `send_warning_to_alt`: Whether or not to send hard bounce messages to
          an alternate address, instead of the sender.
        - `alt_address`: email address to send hard bounce and delay warning.
        - `host_initial_retry`: Number of seconds to wait before first trying
          to reconnect to a down host. Available only for the default profile.
        - `host_max_retry_timeout`: Maximum number of seconds to wait before
          reconnecting to a down host. Available only for the default profile.
        - `bounced_msg_size`: Maximum size of original message (in bytes) to
          include in the bounced notification message. Available only for the
          default profile.

        Examples:
        | BounceConfig Edit | Default | max_queue_lifetime=240 |

        | Bounce Config Edit | test1 |
        | ... | max_queue_lifetime=234 |
        | ... | send_warning_to_alt=YES |
        | ... | alt_address=test@test.com |
        | ... | send_warnings=YES |
        | ... | warnings_subject=test234_subj |
        | ... | warnings_interval=100 |
        """

        input_dict = {
            'prof_numb': prof_numb,
            'max_retries': max_retries,
            'max_queue_lifetime': max_queue_lifetime,
            'initial_retry': initial_retry,
            'max_retry_timeout': max_retry_timeout,
            'send_warning_to_alt': self._process_yes_no(send_warning_to_alt),
            'send_warnings': send_warnings,
            'send_bounces_all': send_bounces_all,
        }

        if is_yes(send_bounces_all):
            input_dict.update({'use_dsn_bounce_format': use_dsn_bounce_format})

            if is_yes(use_dsn_bounce_format):
                input_dict.update({'dsn_subject': dsn_subject,
                                   'parse_dsn': parse_dsn})

        if is_yes(send_warnings):
            input_dict.update({'warnings_subject': warnings_subject,
                        'warnings_interval': warnings_interval,
                        'send_warnings_count': send_warnings_count})

        if is_yes(send_warning_to_alt):
            input_dict.update({'alt_address': alt_address})

        if prof_numb == '1' or prof_numb.lower() == 'default':
            input_dict.update({'host_initial_retry': host_initial_retry,
                               'host_max_retry_timeout': host_max_retry_timeout,
                               'bounced_msg_size': bounced_msg_size})

        self._cli.bounceconfig().edit(prof_numb, input_dict)

    def bounce_config_delete(self, prof_numb):
        """Delete profiles.

        bounceconfig > delete

        Parameters:
        - `prof_numb`: name of the profile to delete.

        Examples:
        | Bounceconfig Delete | test123 |
        | Bounceconfig Delete | profile5 |
        """

        input_dict = {
            'prof_numb': prof_numb,
        }

        self._cli.bounceconfig().delete(prof_numb, input_dict)

