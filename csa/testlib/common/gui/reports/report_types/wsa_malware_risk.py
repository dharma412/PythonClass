#!/usr/bin/env python
# $Id: //prod/main/sarf_centos/testlib/common/gui/reports/report_types/wsa_malware_risk.py#1 $
# $DateTime: 2019/03/22 01:36:06 $
# $Author: aminath $

from sma.constants import sma_web_reports
from report_interface import ReportInfoHolder


class WsaMalwareRiskReport(ReportInfoHolder):
    """
    | MALWARE_RISK | 'Client Malware Risk' |

    Chart data values for this web report:

    Client Malware Risk:
    | Web Proxy - Top Clients   | L4 Traffic Monitor    |
    | `bw saved`                | `total monitored`     |
    | `requests monitored`      | `total blocked`       |
    | `responses monitored`     | `total detected`      |
    | `requests blocked`        |                       |
    | `responses blocked`       |                       |
    | `total monitored`         |                       |
    | `total blocked`           |                       |
    | `total detected`          |                       |
    | `monitored or blocked`    |                       |

    Sorting column values for this web reports:

    Client Malware Risk:
    | 'total monitored'     |
    | 'total blocked'       |
    | 'total detected'      |

    """

    _available_client_activity_chart = \
        {'bw saved': 'BANDWIDTH_SAVED',
         'requests monitored': 'WEB_USER_DETAIL.MONITORED_MALWARE_REQUEST',
         'responses monitored': 'WEB_USER_DETAIL.MONITORED_MALWARE_RESPONSE',
         'requests blocked': 'WEB_USER_DETAIL.BLOCKED_MALWARE_REQUEST',
         'responses blocked': 'WEB_USER_DETAIL.BLOCKED_MALWARE_RESPONSE',
         'total monitored': 'WEB_USER_DETAIL.MONITORED_MALWARE',
         'total blocked': 'WEB_USER_DETAIL.BLOCKED_MALWARE',
         'total detected': 'WEB_USER_DETAIL.DETECTED_MALWARE_TOTAL',
         'monitored or blocked': \
             'WEB_USER_DETAIL.MONITORED_MALWARE,WEB_USER_DETAIL.BLOCKED_MALWARE'
         }

    _available_client_activity_traffic = \
        {'total monitored': 'WEB_USER_BY_TRAFFIC_MONITOR.MONITORED_MALWARE',
         'total blocked': 'WEB_USER_BY_TRAFFIC_MONITOR.BLOCKED_MALWARE',
         'total detected': \
             'WEB_USER_BY_TRAFFIC_MONITOR.MONITORED_MALWARE' + \
             ',WEB_USER_BY_TRAFFIC_MONITOR.BLOCKED_MALWARE'
         }

    client_activity_trans_col_types = \
        {'total monitored': 'Malware Transactions Monitored',
         'total blocked': 'Malware Transactions Blocked',
         'total detected': 'Total Malware Transactions Detected'
         }

    client_activity_connections_col_types = \
        {'total monitored': 'Malware Connections Monitored',
         'total blocked': 'Malware Connections Blocked',
         'total detected': 'Total Malware Connections Detected'
         }

    def get_name(self):
        return sma_web_reports.MALWARE_RISK

    def get_selector(self):
        return 'wsa_client_activity'

    def get_chart_data(self):
        return [self._available_client_activity_chart, \
                self._available_client_activity_traffic]

    def get_table_columns_data(self):
        select_name = 'sort_columns[wsa_client_activity_top_at_risk_clients]'
        values_map = {}
        for key, val in self.client_activity_trans_col_types.iteritems():
            values_map[key] = '%s' % (val,)
        table = (select_name, values_map)

        select_name = 'sort_columns[wsa_client_activity_l4_tm_client_ips]'
        values_map = {}
        for key, val in self.client_activity_connections_col_types.iteritems():
            values_map[key] = '%s' % (val,)
        table2 = (select_name, values_map)

        return [table, table2]


# module functions
def get_reports():
    return [WsaMalwareRiskReport]
