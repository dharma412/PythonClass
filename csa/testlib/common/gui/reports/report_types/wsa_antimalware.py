#!/usr/bin/env python
# $Id: //prod/main/sarf_centos/testlib/common/gui/reports/report_types/wsa_antimalware.py#1 $
# $DateTime: 2019/03/22 01:36:06 $
# $Author: aminath $

from sma.constants import sma_web_reports
from report_interface import ReportInfoHolder


class WsaAntimalwareReport(ReportInfoHolder):
    """
    | ANTIMALWARE | 'Anti-Malware' |

    Chart data values for this web report:

    Anti-Malware:
    | Top Malware Categories    | Top Malware Threats       |
    | `bw saved`                | `bw saved`                |
    | `requests monitored`      | `total monitored`         |
    | `responses monitored`     | `total blocked`           |
    | `requests blocked`        | `total detected`          |
    | `responses blocked`       | `monitored or blocked`    |
    | `total monitored`         |                           |
    | `total blocked`           |                           |
    | `total detected`          |                           |
    | `monitored or blocked`    |                           |

    Sorting column values for this web reports:

    Anti-Malware:
    | 'total monitored' |
    | 'total blocked'   |
    | 'total detected'  |

    """

    _available_amv_chart_categories = \
        {'category': 'key',
         'bw saved': 'BANDWIDTH_SAVED',
         'requests monitored': 'WEB_MALWARE_CATEGORY.MONITORED_MALWARE_REQUEST',
         'responses monitored': \
             'WEB_MALWARE_CATEGORY.MONITORED_MALWARE_RESPONSE',
         'requests blocked': 'WEB_MALWARE_CATEGORY.BLOCKED_MALWARE_REQUEST',
         'responses blocked': 'WEB_MALWARE_CATEGORY.BLOCKED_MALWARE_RESPONSE',
         'total monitored': 'WEB_MALWARE_CATEGORY.MONITORED_MALWARE',
         'total blocked': 'WEB_MALWARE_CATEGORY.BLOCKED_MALWARE',
         'total detected': 'WEB_MALWARE_CATEGORY.DETECTED_MALWARE',
         'monitored or blocked': \
             'WEB_MALWARE_CATEGORY.MONITORED_MALWARE' + \
             ',WEB_MALWARE_CATEGORY.BLOCKED_MALWARE',
         }

    _available_amv_chart_threats = \
        {'category': 'key1',
         'bw saved': 'BANDWIDTH_SAVED',
         'total monitored': \
             'WEB_MALWARE_NAME_MALWARE_CATEGORY_DETAIL.MONITORED_MALWARE',
         'total blocked': \
             'WEB_MALWARE_NAME_MALWARE_CATEGORY_DETAIL.BLOCKED_MALWARE',
         'total detected': \
             'WEB_MALWARE_NAME_MALWARE_CATEGORY_DETAIL.DETECTED_MALWARE',
         'monitored or blocked': \
             'WEB_MALWARE_NAME_MALWARE_CATEGORY_DETAIL.MONITORED_MALWARE' + \
             ',WEB_MALWARE_NAME_MALWARE_CATEGORY_DETAIL.BLOCKED_MALWARE'
         }

    amw_col_types = \
        {'total monitored': 'Transactions Monitored',
         'total blocked': 'Transactions Blocked',
         'total detected': 'Transactions Detected'
         }

    def get_name(self):
        return sma_web_reports.ANTIMALWARE

    def get_selector(self):
        return 'wsa_malware'

    def get_chart_data(self):
        return [self._available_amv_chart_categories, \
                self._available_amv_chart_threats]

    def get_table_columns_data(self):
        select_name = 'sort_columns[wsa_malware_malware_categories]'
        values_map = {}
        for key, val in self.amw_col_types.iteritems():
            values_map[key] = '%s' % (val,)
        table = (select_name, values_map)

        select_name = 'sort_columns[wsa_malware_malware_threats]'
        values_map = {}
        for key, val in self.amw_col_types.iteritems():
            values_map[key] = '%s' % (val,)
        table2 = (select_name, values_map)

        return [table, table2]


# module functions
def get_reports():
    return [WsaAntimalwareReport]
