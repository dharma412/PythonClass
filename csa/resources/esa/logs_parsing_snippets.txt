# $Id: //prod/main/sarf_centos/resources/esa/logs_parsing_snippets.txt#1 $ $DateTime: 2019/03/22 01:36:06 $ $Author: aminath $
*** Settings ***
Library    UtilsLibrary  ${ESA}
Library    String
Library    Collections

*** Keywords ***

Get Mid Value
    [Arguments]  ${lookup_record}  ${search_path}=mail  ${timeout}=60
    [Documentation]  Return MID value from record.\n
    ...  *Parameters*:\n
    ...  - `lookup_record`: The pattern to grep MID value from.\n
    ...  - `search_path`: Optional. Sets the `search_path` parameter in `Log Search` keyword.\n
    ...  - `timeout`: Optional. Sets the `timeout` parameter in `Log Search` keyword.\n
    ...  *Example*:\n
    ...  ${mid}=  Get Mid Value  MID .* ICID .* To: .*${TEST_ID}@${CLIENT}.*
    ${matches}  ${found}=  Log Search  ${lookup_record}  search_path=${search_path}  timeout=${timeout}
    Should Be True  ${matches} >= 1
    ${record}  Get From List  ${found}  0
    ${mid}=  Evaluate  re.search('MID (?P<mid>[\\d]+)', """${record}""").group('mid')  modules=re
    [Return]  ${mid}

Get All Mids
    [Arguments]  ${lookup_record}  ${search_path}=mail  ${timeout}=90
    [Documentation]  Return MID value from record.\n
    ...  *Parameters*:\n
    ...  - `lookup_record`: The pattern to grep MID value from.\n
    ...  - `search_path`: Optional. Sets the `search_path` parameter in `Log Search` keyword.\n
    ...  - `timeout`: Optional. Sets the `timeout` parameter in `Log Search` keyword.\n
    ...  *Example*:\n
    ...  ${mid}=  Get Mid Value  MID .* ICID .* To: .*${TEST_ID}@${CLIENT}.*
    ${matches}  ${found}=  Log Search  ${lookup_record}  search_path=${search_path}  timeout=${timeout}
    Should Be True  ${matches} >= 1
    ${mid_list}=  Create List
    :For  ${index}  IN RANGE  ${matches}
    \  ${record}  Get From List  ${found}  ${index}
    \  ${mid}=  Evaluate  re.search('MID (?P<mid>[\\d]+)', """${record}""").group('mid')  modules=re
    \  Append To List  ${mid_list}  ${mid}
    [Return]  ${mid_list}

Parse Varargs
    [Arguments]  ${pattern}  ${pattern_name}  ${default_value}  @{varargs}
    [Documentation]  This is internal keyword and should not be used outside of this resource file.\n
    ...  Keyword modifies @{varargs} list and returns modified list.
    ${re}=  Evaluate  re  modules=re
    ${compiled}=  Call Method  ${re}  compile  ${pattern}
    FOR  ${arg}  IN  @{varargs}
       ${mo}=  Call Method  ${re}  match  ${compiled}  ${arg}
       ${val}=  Set Variable If  '${mo}'!='${None}'  ${mo.group('${pattern_name}')}
       Run Keyword If  '${val}'!='${None}'
       ...  Remove Values From List  ${varargs}  ${arg}
       Run Keyword If  '${val}'!='${None}'
       ...  Exit For Loop
    END
    ${res}=  Set Variable If  '${val}'!='${None}'  ${val.strip()}  ${default_value}
    [Return]  ${res}  @{varargs}

Verify And Wait For Log Records
    [Arguments]  @{varargs}
    [Documentation]  Wraps `Verify Log Contains Records` with `Wait Until Keyword Succeeds`.\n
    ...  *Parameters*:\n
    ...  - `varargs`: Patterns to lookup for. Should contain 3 parts: 1. pattern itself, 2.comparator, 3. expected num of matches\n
    ...  @{varargs} optionally can have parameters ${wait_time}, ${retry_time} that are used as arguments for `Wait Until Keyword Succeeds` keyword.
    ...  *Examples:*\n
    ...  Verify And Wait For Log Records
    ...  ...  wait_time=10 minutes
    ...  ...  retry_time=2 minutes
    ...  ...  timeout=60
    ...  ...  MID .* Subject .Testing. == 10
    ...  ...  MID .* queued for delivery == 10
    ...  An example above shows how to check records presence in logs and wait until records count is 10.\n
    ...  Re-check every 2 minutes, max time to wait is 10 minutes.
    ${wait_time}  @{varargs}=  Parse Varargs
    ...  wait_time\\s{0,}=\\s{0,}(?P<wait_time>.*)
    ...  wait_time  1 minutes  @{varargs}
    ${retry_time}  @{varargs}=  Parse Varargs
    ...  retry_time\\s{0,}=\\s{0,}(?P<retry_time>.*)
    ...  retry_time  15 seconds  @{varargs}
    Wait Until Keyword Succeeds
    ...  ${wait_time}
    ...  ${retry_time}
    ...  Verify Log Contains Records  @{varargs}

Verify Log Contains Records
    [Arguments]  @{varargs}
    [Documentation]  Verifies if certain log contains a set of records.\n
    ...  *Parameters*:\n
    ...  - `varargs`: Patterns to lookup for. Should contain 3 parts:\n
    ...     1. pattern itself\n
    ...     2. comparator\n
    ...     3. expected num of matches\n
    ...  @{varargs} is also parsed for `search_path` parameter: Optional.
    ...  Defaults to 'mail'. Sets the `search_path` parameter in `Log Search` keyword.\n
    ...  *Example*:\n
    ...  Verify Log Contains Records\n
    ...  ...  Time offset from UTC: .* seconds >= 1\n
    ...  ...  MID .* > 1\n
    ...  ...  ISQ: Quarantined MID 231==1\n
    ...  ...  ISQ: Quarantined MID 231>1\n
    ...  Verify Log Contains Records\n
    ...  ...  search_path=mail\n
    ...  ...  MID .* > 1\n
    # Either use this code to get search_path and make it optional,
    # in this case this must be the first argument passed to the keyword
    #${is_path}=  Get From List  ${varargs}  0
    #${mo}=  Call Method  ${re}  match  ${compiled_path}  ${is_path}
    #....
    # Or use this code to loop through all args and get search_path.
    # Also makes it optional.
    ${re}=  Evaluate  re  modules=re
    ${search_path_pattern}=    Set Variable    search_path\\s{0,}=\\s{0,}(?P<search_path>.*)
    ${timeout_pattern}=    Set Variable    timeout\\s{0,}=\\s{0,}(?P<timeout>.*)
    ${compiled_path}=  Call Method    ${re}
    ...   compile      ${search_path_pattern}
    ${compiled_timeout}=  Call Method    ${re}
    ...   compile     ${timeout_pattern}

    FOR  ${arg}  IN  @{varargs}
       ${mo}=  Call Method  ${re}  match  ${compiled_path}  ${arg}
       ${search_path_val}=  Set Variable If  '${mo}'!='${None}'  ${mo.group('search_path')}
       Run Keyword If  '${search_path_val}'!='${None}'
       ...  Remove Values From List  ${varargs}  ${arg}
       Run Keyword If  '${search_path_val}'!='${None}'
       ...  Exit For Loop
    END
    ${search_path}=  Set Variable If  '${search_path_val}'!='${None}'  ${search_path_val.strip()}  mail

    FOR  ${arg}  IN  @{varargs}
       ${mo}=  Call Method  ${re}  match  ${compiled_timeout}  ${arg}
       ${timeout_val}=  Set Variable If  '${mo}'!='${None}'  ${mo.group('timeout')}
       Run Keyword If  '${timeout_val}'!='${None}'
       ...  Remove Values From List  ${varargs}  ${arg}
       Run Keyword If  '${timeout_val}'!='${None}'
       ...  Exit For Loop
    END
    ${timeout}=  Set Variable If  '${timeout_val}'!='${None}'  ${timeout_val.strip()}  60

    # have to use this tricky code as RF does not allow to pass objects!? eg,
    # ${compiled}=  re.compile(some_pattern)
    # re.match(${compiled}, 'some_string') - fails
    # re.match('${compiled}', 'some_string') - fails
    # because it gets repr on the object, not the object itself
    ${comparator_pattern}=      Set Variable    (?P<pattern>.*)\\s{0,}(?P<comparator>>=|<=|==|>|<)\\s{0,}(?P<matches>\\d+)$
    ${compiled}=  Call Method  ${re}  compile    ${comparator_pattern}
    # should the ${arg} be escaped???
    FOR  ${arg}  IN  @{varargs}
       ${mo}=  Call Method  ${re}  match  ${compiled}  ${arg}
       ${pattern}=  Set Variable  ${mo.group('pattern').rstrip()}
       ${expected_matches}=  Set Variable  ${mo.group('matches')}
       ${comparator}=  Set Variable  ${mo.group('comparator')}
       ${matches}  ${found}=  Log Search  ${pattern}  search_path=${search_path}  timeout=${timeout}
       ${expr}=  Set Variable  ${matches} ${comparator} ${expected_matches}
       ${result}=  Evaluate  eval("${expr}")
       Run Keyword If    '${result}'=='False'    Log Search    MID|ICID|Message     search_path=${search_path}      timeout=5    trace=True
       Should Be True  ${result}  msg=Evaluated expression "${expr}" is ${result}. Pattern: "${pattern}"; Real matches "${matches}"; Comparator "${comparator}"; Expected matches "${expected_matches}"
    END

Verify Logs Contain Records
    [Arguments]  @{varargs}
    [Documentation]  Verifies if logs contain a set of records.\n
    ...  *Parameters*:\n
    ...  - `varargs`: Patterns to lookup for. Should contain 4 parts: 1. pattern itself, 2.comparator, 3. expected num of matches, 4. search path
    ...  \n
    ...  *Example*:\n
    ...  Verify Logs Contain Records\n
    ...  ...  Time offset from UTC: .* seconds >= 1, mail\n
    ...  ...  User .* from .* was authenticated successfully >1, authentication\n
    ...  ...  PID .*: User admin commit changes > 1, system\n
    ${re}=  Evaluate  re  modules=re
    ${compiled}=  Call Method  ${re}  compile  (?P<pattern>.*)\\s{0,}(?P<comparator>>=|<=|==|>|<)\\s{0,}(?P<matches>\\d+)\\s{0,},\\s{0,}(?P<search_path>.*)$
    FOR  ${arg}  IN  @{varargs}
       ${mo}=  Call Method  ${re}  match  ${compiled}  ${arg}
       ${pattern}=  Set Variable  ${mo.group('pattern').rstrip()}
       ${expected_matches}=  Set Variable  ${mo.group('matches')}
       ${comparator}=  Set Variable  ${mo.group('comparator')}
       ${search_path}=  Set Variable  ${mo.group('search_path').strip()}
       ${matches}  ${found}=  Log Search  ${pattern}  search_path=${search_path}  timeout=60
       ${expr}=  Set Variable  ${matches} ${comparator} ${expected_matches}
       ${result}=  Evaluate  eval("${expr}")
       Should Be True  ${result}  msg=Evaluated expression "${expr}" is ${result}. Search path: "${search_path}"; Pattern: "${pattern}"; Real matches "${matches}"; Comparator "${comparator}"; Expected matches "${expected_matches}"
    END

Get Message ID Header Value
    [Arguments]  ${lookup_record}    ${mid}=.*  ${search_path}=mail  ${timeout}=60
    [Documentation]  Return MID ID Header value from record.\n
    ...  *Parameters*:\n
    ...  - `lookup_record`: The pattern to grep MID value from.\n
    ...  - `search_path`: Optional. Sets the `search_path` parameter in `Log Search` keyword.\n
    ...  - `timeout`: Optional. Sets the `timeout` parameter in `Log Search` keyword.\n
    ...  *Example*:\n
    ...  ${mid_header}=  Get Message ID Header Value <mid> ICID .* To: .*${TEST_ID}@${CLIENT}.*
    ${matches}  ${found}=  Log Search  ${lookup_record}  search_path=${search_path}  timeout=${timeout}
    Should Be True  ${matches} >= 1
    ${record}  Get From List  ${found}  0
    ${regexp_patern}=  Catenate  SEPARATOR=  MID .* Message-ID \\
    ...  '<(?P<mid_header>[\\w@$.]+)>\\'
    ${mid_header}=  Evaluate  re.search('${regexp_patern}', """${record}""").group('mid_header')
    ...  modules=re
    [Return]  ${mid_header}
