*** Settings ***
Library    SSHLibrary
Library    EsaGuiLibrary
Library    EsaCliLibrary
Library    EsaUtilsLibrary
Library    EsaApiLibrary
Library    UtilsLibrary  ${ESA}
Library    OperatingSystem
Library    String
Variables  log_files.py
Variables  esa_intf.py   ${ESA}
Variables  network.py
Variables  credentials.py
Resource   esa/configuredut.txt
Resource   logs.txt
Resource   selenium.txt
Resource   esa/backdoor_snippets.txt
Resource   esa/logs_parsing_snippets.txt
Resource   licensesmart_common.robot
Resource   esa/updater.txt
Resource   esa/process.robot
Resource   esa/file_operations.robot

*** Variables ***
${GETDTIME_FMT} =  %a %b %d %H:%M:%S %Y %Z
${SETDTIME_FMT} =  %m/%d/%Y %H:%M:%S
${CLI_ALIAS} =     /data/bin/runas admin /data/bin/cli.sh
${CONFIG_DIR} =  /data/pub/configuration

*** Keywords ***
DefaultTestCaseSetup
    [Documentation]  Actions that should be included in Setup of every TestCase

    # Checking CLI access to DUT. If cli session was closed, trying to reopen it
    ${ready}  ${out2}  Run Keyword And Ignore Error
    ...  Start CLI Session If Not Open
    Run Keyword If  '${ready}' == 'FAIL'
    ...  Fatal Error  Cli session is not available and can not be reopened!

    Set Test Variable  ${EXCLUDE_PATTERNS}  ${EMPTY}
    Find Log Errors
    Create Test Timestamp  ${ESA_IP}

DefaultTestCaseTeardown
    [Documentation]  Actions that should be included in Teardown of every TestCase
    Pass Fail Criteria  ${ESA}
    SSHLibrary.Close All Connections
    Find New Log Errors

DefaultTestSuiteSetup
    [Documentation]  Actions that should be included in Setup of every TestSuite
    [Arguments]  ${should_revert_to_initial}=${False}  ${dut_prefix}=ESA    ${skip_ssl_config}=${False}

    Log Variables
    # Checking GUI access to DUT (a crash or a reboot could happen)
    ${ready}  ${out2}  Run Keyword And Ignore Error
    ...  Wait until DUT Is Accessible  wait_for_ports=${DUT_PORT}  timeout=600
    Run Keyword If  '${ready}' == 'FAIL'
    ...  Fatal Error  Gui became unavailable

    # Checking CLI access to DUT. If cli session was closed, trying to reopen it
    ${ready}  ${out2}  Run Keyword And Ignore Error
    ...  Start CLI Session If Not Open
    Run Keyword If  '${ready}' == 'FAIL'
    ...  Fatal Error  Cli session is not available and can not be reopened!

    ${is_restricted}=  Is Admin Cli Restricted
    Run Keyword If  ${is_restricted}
    ...  Passwd
    ...  old_pwd=${DUT_ADMIN_PASSWORD}
    ...  new_pwd=${DUT_ADMIN_SSW_PASSWORD}

    ${output}=  Run On Dut  ls -l /data/pub/configuration/default_config.xml
    Run On Dut
    ...  sed -i '' -E -e 's/\\. \\/etc\\/phoebe.conf$/\\. \\/etc\\/phoebe.conf \\&\\& sysctl compat.ia32.maxdsiz=1073741824/g' /data/etc/rc.d/000_config.sh
    Run Keyword If  """default_config.xml""" in """${output}"""
    ...  Load Default SSW Config
    Run Keyword If  """default_config.xml""" not in """${output}"""
    ...  Run System Setup Wizard Via CLI
    ...  dut_prefix=${dut_prefix}
    ...  should_revert_to_initial=${should_revert_to_initial}

    # need for workaround of the bug 73491
    Run On Dut  chmod 777 /data/lib/python-eggs/rtestuser/

    #If EASY_POV_MODE set to 1 enabling EASY POV MODE and Classic License - USE_SMART_LICENSE 0
    Run Keyword If  ${EASY_POV_MODE} == 1 and ${USE_SMART_LICENSE} == 0
    ...   EasyPov Enable

    # If USE_SMART_LICENSE set to 1, enable smart license
    Run Keyword If  ${USE_SMART_LICENSE} == 1
    ...  Enable Smart License On Appliance

    Run Keyword If  ${SMART_LICENSE_REGISTERED_STATE} == 1
    ...  Register DUT With SSM

    #Returns -1 when no entitlements available for activation
    ${entl_available}=  Run Keyword If  ${USE_SMART_LICENSE} == 1
    ...  Entitlements Not Activated

    Run Keyword If  ${USE_SMART_LICENSE} == 1 and ${entl_available} != -1
    ...  Request All Entitlements

    #Restarting the CLI session is recommended after activation of features
    #in smart license. Also verifies that all entitlements are activated in SL.
    Run Keyword If  ${USE_SMART_LICENSE} == 1  Run Keywords
    ...  Verify All Entitlements Are Activated
    ...  Restart CLI Session

    Run Keyword If  '${skip_ssl_config}' == '${False}'
    ...  Configure SSL For GUI
    Selenium Login

    # Stop null_smtpd process(s) and Clean null_smptd pid files
    Clear Null Smtpd

DefaultTestSuiteTeardown
    [Documentation]  Actions that should be included in Teardown of every TestSuite

    #If EASY_POV_MODE set to 1 enabling EASY POV MODE and Classic License - USE_SMART_LICENSE 0
    Run Keyword If  ${EASY_POV_MODE} == 1 and ${USE_SMART_LICENSE} == 0
    ...   EasyPov Disable

    Run Keyword If  ${USE_SMART_LICENSE} == 1 and ${SMART_LICENSE_CLEANUP_CONFIG} == 1  Run Keywords
    ...  Release All Entitlements
    ...  Deregister Appliance From SSM
    ...  Suspend
    ...  Reset Config

    SSHLibrary.Close All Connections
    Selenium Close
    # Stop null_smtpd process(s) and Clean null_smptd pid files
    Clear Null Smtpd

Run System Setup Wizard Via CLI
    [Arguments]  ${dut_prefix}=ESA  ${should_revert_to_initial}=${False}
    [Documentation]  This keyword runs the systemsetup command from ESA CLI.
    ...  Before running the system setup it runs 'updatenow force' command
    ...  which will update all the engines (if not done already). After running
    ...  system setup it saves the SWW config on the ESA as default_config.xml

    Run Keyword If  ${should_revert_to_initial}
    ...  Revert DUT To Initial State
    Run Keyword If  not ${should_revert_to_initial}
    ...  Setup Dut Via CLI  dut_prefix=${dut_prefix}

    # Force Update and wait for updates to complete if not done already
    ${res}  ${msg}=  Run Keyword And Ignore Error
    ...  Variable Should Exist  ${UPDATER_TYPE}
    ${updater_type}=  Set Variable If  "${res}"=="PASS"  ${UPDATER_TYPE}  staging

    ${update_server}=  Run Keyword If  "${updater_type.upper()}"!="CUSTOM"
    ...  Get Update Server  ${updater_type}
    ${update_server}=  Set Variable If  "${updater_type.upper()}"=="CUSTOM"
    ...   ${CUSTOM_UPDATER}  ${update_server}

    Update Config Dynamichost  dynamic_host=${update_server}

    # ##########################################################################
    # ESA below 9.1.0 versions does not have "validate_certificates" option in #
    # "updateconfig" CLI command. Due to this below step fails. To skip this   #
    # issue one check is added it will check the version of ESA and if the     #
    # version is above or equal to 9.1.0 then only"validate_certificates" steps#
    # executed.                                                                #
    # ##########################################################################

    ${version}=  Evaluate  ''.join(${ESA_BUILD.replace('phoebe-','').split('-')[:-1]})
    Run Keyword If  ${version} >= 910
    ...  Update Config Validate Certificates  validate_certificates=No
    Commit

    Roll Over Now  logname=updater_logs
    Sleep  3s  msg=Wait for logs rollover

    Update Now  force=${True}

    Run Keyword And Ignore Error
    ...  Verify And Wait For Log Records
    ...  search_path=updater
    ...  wait_time=15 minutes
    ...  retry_time=2 minutes
    ...  case update completed >= 1
    ...  content_scanner update completed >= 1
    ...  enrollment_client update completed >= 1
    ...  geo_countries update completed >= 1
    ...  repeng update completed >= 1
    ...  sophos update completed >= 1
    ...  timezones update completed >= 1

    # Store Default SSW config
    ${config}=  Save Config  encrypt_pw
    Run On Dut  mv /data/pub/configuration/${config} /data/pub/configuration/default_config.xml

Load Default SSW Config
    [Documentation]  Loads the config file default_config.xml from CLI
    Load Config From File  default_config.xml
    Commit

    ${RELAY_MAILS}            Set Variable  ${ESA_RELAY_HOSTS}
    ${PUBLIC_LISTENER_NAME}   Set Variable  InBoundMail
    ${PRIVATE_LISTENER_NAME}  Set Variable  OutBoundMail
    ${MODE}  Get Inet Mode
    Set Suite Variable  ${RELAY_MAILS}
    Set Suite Variable  ${PUBLIC_LISTENER_NAME}
    Set Suite Variable  ${PRIVATE_LISTENER_NAME}
    Set Suite Variable  ${MODE}

Get Update Server
    [Arguments]  ${updater_type}=staging

    ${is_dut_virtual}=  Is Virtual Machine  vmname=${DUT}
    Set Suite Variable  ${is_dut_virtual}
    ${update_server}=  Set Variable If  ${is_dut_virtual}
    ...   ${${updater_type.upper()}_UPDATE_SERVER_FOR_VIRTUAL}
    ...   ${${updater_type.upper()}_UPDATE_SERVER_FOR_HARDWARE}

    [Return]  ${update_server}

Clear Null Smtpd
    [Documentation]  Stops any running drain and removes PID files
    Run Keyword And Ignore Error  Null Smtpd Stop All
    Run Keyword And Ignore Error  Null Smtpd Stop
    ${output}=  Run  ps aux | grep 'null_smtpd' | grep -v grep | awk '{print $2}'
    Log  ${output}
    Run Keyword If  """${output}"""!="""${EMPTY}"""
    ...  Run  kill -p ${output}
    ${output}=  Run  sudo rm -vf /tmp/null_smptd.*
    Log  ${output}

Configure SSL For GUI
    ${res}  ${msg}=  Run Keyword And Ignore Error
    ...  SSL Config Gui  ssl_method=TLS v1/TLS v1.2
    ${res}  ${msg}=  Run Keyword If  '${res}' == 'FAIL'
    ...  Run Keyword And Ignore Error
         ...  SSL Config Gui  ssl_method=TLS v1.0
    Run Keyword If  '${res}' == 'FAIL'
    ...  SSL Config Gui  ssl_method=3
    Commit

DefaultSuiteSetupForSSC
    [Documentation]  Setup SSC. Load licence
    [Arguments]  ${hostname}=${ESA}
    Copy File To DUT  %{SARF_HOME}/tests/testdata/virtual/vesalicense.xml
    ...  /data/pub/configuration/

    # Checking CLI access to DUT. If cli session was closed, trying to reopen it
    ${ready}  ${out2}  Run Keyword And Ignore Error
    ...  Start CLI Session If Not Open
    Run Keyword If  '${ready}' == 'FAIL'
    ...  Fatal Error  Cli session is not available and can not be reopened!

    Load License  conf=file  conf_file=vesalicense.xml
    ${license_status}=  Show License
    Log  ${license_status}

Clean SLBL Database
    [Arguments]  ${hostname}=${ESA}
    ${version_info}=  Version
    ${esa_serial}=  Evaluate
    ...  re.search(r'Serial #: ([\\w\\-]+)', """${version_info}""").groups()[0]  re
    ${slbl_name}=  Set Variable  slbl-${esa_serial}-20130117T060432.csv
    ${cmd}=  Set Variable
    ...  echo "# File exported by the SL/BL at 20130117T060432" > /data/pub/configuration/${slbl_name}
    Execute And Log  ${hostname}  ${cmd}  ${RTESTUSER}  ${RTESTUSER_PASSWORD}
    Set SLBL State And Commit  ${True}
    Wait Until Keyword Succeeds  2 min  5 sec
    ...  SLBL Config Import  ${slbl_name}  yes
    Set SLBL State And Commit  ${False}

Revert DUT To Initial State
    [Documentation]  Reset configuration and run System Setup Wizard via CLI
    Setup Dut Via CLI

    Deleterecipients All  confirm=yes

    Reset Counters

    Clean EUQ

    # SLBL DB cleaning was temporarily disabled due to problems in recent appliance builds

    Clean System Quarantines

    Clean All Reports And Commit

    Diagnostic Reporting Delete Db  confirm=yes
    Diagnostic Tracking Delete Db  confirm=yes

    Reset Featurekeys  VOF  case  mcafee  sophos  imh  rsadlp
    ...  envelope_encryption

    Roll Over Now

Wait For Prox Restarted
    No Operation  # Every commit and ssw waits until all processes are ready

Pass Fail Criteria
    [Documentation]  Additional verifications to be performed at the end of Test Case
    [Arguments]  ${hostname}
    Core Files Check  ${hostname}

Get Host IP By Name
    [Documentation]  Returns IP address of specified hostname.
    [Arguments]  ${host}  ${force_ipv6}=${False}
    ${ipv4} =  Evaluate
    ...  socket.getaddrinfo('${host}', None, socket.AF_INET)[0][4][0]  socket
    ${status}  ${ipv6_tmp} =  Run Keyword And Ignore Error  Evaluate
    ...  socket.getaddrinfo('${host}', None, socket.AF_INET6)[0][4][0]  socket
    ${ipv6} =  Run Keyword If  '${status}' == 'PASS'  Set Variable  ${ipv6_tmp}
    ${ip} =  Set Variable If  ${force_ipv6}  ${ipv6}  ${ipv4}
    [Return]  ${ip}

Execute And Log
    [Documentation]  This keyword executes command and logs stdout.
    [Arguments]  ${hostname}  ${cmd}  ${username}  ${password}
    ${address} =  Get Host IP By Name  ${hostname}
    SSHLibrary.Open Connection  ${address}
    SSHLibrary.Login  ${username}  ${password}
    ${out} =  SSHLibrary.Execute Command  ${cmd}
    Log  ${out}
    SSHLibrary.Close Connection
    [Return]  ${out}

Get Current Timestamp
    [Documentation]  This keyword gets current timestamp from specified hostname.
    [Arguments]  ${hostname}
    ${out} =  Execute And Log  ${hostname}  date "+%Y%m%d%H%M"
    ...  ${RTESTUSER}  ${RTESTUSER_PASSWORD}
    [Return]  ${out}

Get Date Time Offset
   [Documentation]  Calculates resulting date with given offset.\n
   ...  The datetime format should look like "Wed Jul 11 07:03:12 2012 PDT"\n
   ...  (the same format as `settime` cli command returns).\n
   ...  *Arguments:*\n
   ...  - `current_datetime`: The datetime as it is returned by `settime`\n
   ...  CLI command, format like "Wed Jul 11 07:03:12 2012 PDT"\n
   ...  - `offset_days`: Offset for days.\n
   ...  - `offset_hours`: Offset for hours.\n
   ...  - `offset_minutes`: Offset for minutes.\n
   ...  - `offset_seconds`: Offset for seconds.\n
   ...  All offset arguments are optional. Accepts same values as python's datetime.timedelta.
   ...  *Return:*\n
   ...  Date and time as string suitable for CLI `settime` command.
   [Arguments]  ${current_datetime}
   ...  ${offset_days}=0
   ...  ${offset_hours}=0
   ...  ${offset_minutes}=0
   ...  ${offset_seconds}=0
   ${result_dt}=  Evaluate
   ...  datetime.datetime.strptime('${current_datetime}'[:-4], '%a %b %d %H:%M:%S %Y') + datetime.timedelta(days=int(${offset_days}), hours=int(${offset_hours}), minutes=int(${offset_minutes}), seconds=int(${offset_seconds}))
   ...  datetime
   ${result_as_str}=  Evaluate  datetime.datetime.strptime('${result_dt}', '%Y-%m-%d %H:%M:%S').strftime('%m/%d/%Y %H:%M:%S')
   ...  datetime
   [Return]  ${result_as_str}

Check Core Files Newer Than Time
    [Documentation]  This keyword checks core files that are newer than \n
    ...  specified timestamp, runs them against gdb and logs results.
    [Arguments]  ${hostname}  ${username}  ${password}  ${timestamp}
    ${address} =  Get Host IP By Name  ${hostname}
    SSHLibrary.Open Connection  ${address}
    SSHLibrary.Login  ${username}  ${password}
    SSHLibrary.Execute Command  touch -t ${timestamp} /tmp/timestamp
    ${out} =  SSHLibrary.Execute Command
    ...  find /data/cores/ -name "*.core" -newer /tmp/timestamp
    ${subcmd1}=  Set Variable
    ...  printf "set pagination off\\nbt\\nt 2\\nbt\\n" > /tmp/gdb_commands.txt
	${gdb_command}=  Set Variable
	...  gdb /usr/local/prox/libexec/prox '{}' -x /tmp/gdb_commands.txt --batch
    ${subcmd2}=  Set Variable
    ...  find /data/cores/ -name "*.core" -newer /tmp/timestamp -exec ${gdb_command} ';'
    ${subcmd3}=  Set Variable
    ...  rm /tmp/gdb_commands.txt
    ${cmd}=    Set Variable  ${subcmd1} && ${subcmd2} && ${subcmd3}
    Run Keyword Unless  '${out}' == '${EMPTY}'  Sleep  1m
    Run Keyword Unless  '${out}' == '${EMPTY}'
    ...  Execute And Log  ${hostname}  ${cmd}  ${username}  ${password}
    SSHLibrary.Close Connection
    Run Keyword Unless  '${out}' == '${EMPTY}'  Log  ${out}
    Run Keyword Unless  '${out}' == '${EMPTY}'  Fail  msg=crash detected.

Delete Files At Location
    [Documentation]  This keyword deletes all files at specified location.
    [Arguments]  ${hostname}  ${username}  ${password}  ${location}
    ${cmd} =  Set Variable  rm -rf ${location}/*
    Execute And Log  ${hostname}  ${cmd}  ${username}  ${password}

Core Files Check
    [Documentation]  This keyword performs core files check.
    [Arguments]  ${hostname}
    Check Core Files Newer Than Time  ${hostname}  ${RTESTUSER}
    ...  ${RTESTUSER_PASSWORD}  ${timestamp}

Create Test Timestamp
    [Documentation]  This keyword creates test variable with timestamp value.
    [Arguments]  ${hostname}
    ${tmstmp} =  Get Current Timestamp  ${hostname}
    Set Test Variable  ${timestamp}  ${tmstmp}

Get DUT Connections Status
    [Documentation]  Returns DUT connections status.
    [Arguments]  ${hostname}  ${username}=${DUT_ADMIN}  ${password}=${DUT_ADMIN_PASSWORD}
    ${cmd} =  Set Variable  status detail
    ${out} =  Execute And Log  ${hostname}  ${cmd}  ${username}  ${password}
    ${connections} =  Get Lines Containing String  ${out}  und Conn.
    [Return]  ${connections}

Get ESA RF Version
    [Documentation]  Retuns ESA appliance version in format phoebeXX
    [Arguments]  ${hostname}
    ${cmd} =  Set Variable  ${CLI_ALIAS} version |& cat
    ${version_info} =  Execute And Log
    ...  ${hostname}  ${cmd}  ${RTESTUSER}  ${RTESTUSER_PASSWORD}
    ${version_suffix} =  Evaluate
    ...  ''.join(re.search(r'([0-9])\.([0-9])\.[0-9]\-[0-9]{3}', '''${version_info}''').groups())  re
    ${version} =  Catenate  phoebe  ${version_suffix}
    [Return]  ${version}

Sync Appliances Datetime
    [Documentation]  Applies time gotten from SMA appliance\n
    ...  using Set Time Get keyword to ESA appliance(s)
    [Arguments]  ${src_sma_host}  @{dest_esa_hosts}
    ${date_cmd} =  Set Variable  date +"${GETDTIME_FMT}"
    ${sma_datetime} =  Run On Dut  ${date_cmd}  ${src_sma_host}
    @{esa_names}=  Split String  ${ESA_IDS}  ,
    FOR  ${esa_key}  IN  @{esa_names}
        ${datetime_to_set} =  Evaluate
        ...  datetime.datetime.strptime('${sma_datetime}', '${GETDTIME_FMT}').strftime('${SETDTIME_FMT}')
        ...  datetime
        ${esa_host}=  Set Variable  ${${esa_key}}
        ${esa_in_list}=  Count Values In List  ${dest_esa_hosts}  ${esa_host}
        Run Keyword If  ${esa_in_list}  ${esa_key}CliLibrary.Set Time  ${datetime_to_set}
    END

Shift ESA Datetime
    [Documentation]  Shifts current ESA datetime\n
    ...  to ${sec_offset} seconds
    [Arguments]  ${sec_offset}=900
    ${cur_time} =  Set Time
    ${datetime_to_set} =  Evaluate
    ...  (datetime.datetime.strptime('${cur_time}', '${GETDTIME_FMT}') + datetime.timedelta(seconds=${sec_offset})).strftime('${SETDTIME_FMT}')
    ...  datetime
    Set Time  ${datetime_to_set}

Load ESA Config and Remove Saved
    [Documentation]  Loads previously stored ESA config\n
    ...  and removes it from appliance\n
    ...  There should be no uncommited changes on appliance\n
    ...  otherwise this keyword will fail
    [Arguments]  ${hostname}  ${config_path}
    ${config_name} =  Fetch From Right  ${config_path}  /
    Load Config From File  ${config_name}
    Commit  comment=${config_name} loaded.
    ${cmd} =  Set Variable  rm /data/pub/configuration/${config_name}
    Execute And Log  ${hostname}  ${cmd}  ${RTESTUSER}  ${RTESTUSER_PASSWORD}

Get ESA Listener
    [Documentation]  Get listener information.\n
    ...  Get data from first listener if there are multiple listeners in the scope.\n
    ...  List of available attributes: \n
    ...  http://eng.ironport.com/docs/qa/sarf/esakeyword/phoebe76/cli/listenerconfig.html#Listenerconfig%20Find%20Listeners
    [Arguments]  ${scope}=Public
    ${listeners_obj}=     Listenerconfig Get Info
    FOR  ${listener_entry}  IN  @{listeners_obj.all_listeners}
        Log     ${listener_entry}
        ${listener_info}=     Set Variable   ${listener_entry}
        ${current_scope}=     Get From Dictionary    ${listener_entry}     scope
        Run Keyword If  """${current_scope.lower()}"""=="""${scope.lower()}"""  Exit FOR Loop
    END
    [Return]    ${listener_info}

Get ESA ${pub_pr} IP
    [Documentation]  Get ESA Public/Private IP depending on inet mode.\n
    ...  Uses inline variables syntax.\n
    ...  Example:\n
    ...  ${esa_pub_listener}=  Get ESA Public IP\n
    ...  ${esa_pr_listener}=  Get ESA Private IP\n
    ${scope} =  Set Variable  ${pub_pr.title()}
    ${ESA_LISTENER} =     Get ESA Listener  scope=${scope}
    ${ESA_LISTENER_IP} =  Set Variable If
    ...  '${INET_MODE.lower()}'=='ipv4'
    ...  ${ESA_LISTENER.ipv4}
    ...  ${ESA_LISTENER.ipv6}
    [Return]  ${ESA_LISTENER_IP}

Clean Up Delivery Queue
    [Documentation]  Clean up deilvery queue.\n
    ...  1. restarts nullsmtpd if it is running.\n
    ...  2. on DUT runs 'delivernow > all'\n
    ...  3. stops nullsmtpd
    Run Keyword And Ignore Error  Null SMTPd Stop
    Null SMTPd Start
    Deliver Now All
    FOR  ${idx}  IN RANGE  1000000
        ${msg}=  Null SMTPd Next Message  timeout=5
        Run Keyword If  """${msg}"""=="""${None}"""  Exit FOR Loop
    END
    Run Keyword And Ignore Error  Null SMTPd Stop

Configure RAT to Allow Sending to Client
    [Documentation]  Allows sending of messages to IPv4, IPv6 and DNS
    ...  \ of host on which test is run.
    @{RAT_entries} =  Create List
    ...  ${CLIENT}  ${CLIENT_IP}  ${CLIENT_IPV6}
    FOR  ${RAT_entry}  IN  @{RAT_entries}
        ${status}  ${value} =  Run Keyword and Ignore Error
        ...  ListenerConfig Edit RCPTAccess Delete
        ...  InboundMail  ${RAT_entry}
        ListenerConfig Edit RCPTAccess New
        ...  InboundMail  ${RAT_entry}  Action=ACCEPT
    END
    Commit  comment=@{RAT_entries} added to RAT.

Get Data Interfaces Hostnames
    [Arguments]  ${DUT}
    ${dut_hostname}  ${domain}=  Split String  ${DUT}  .
    ${data1_hostname}=  Set Variable If  """${domain}"""=="""ibesa"""
    ...  ${dut_hostname}-p1.${domain}
    ${data2_hostname}=  Set Variable If  """${domain}"""=="""ibesa"""
    ...  ${dut_hostname}-p2.${domain}
    ${data1_hostname}=  Set Variable If  """${domain}"""!="""ibesa"""
    ...  a001.d1.${DUT}  ${data1_hostname}
    ${data2_hostname}=  Set Variable If  """${domain}"""!="""ibesa"""
    ...  a001.d2.${DUT}  ${data2_hostname}
    [Return]  ${data1_hostname}  ${data2_hostname}

Get Network Interface Map
    [Arguments]  ${dut_prefix}=${ESA}
    ${iface_map_other_than_c1xx}=  Create Dictionary
    ...  a001.d1.${dut_prefix}     d1.${dut_prefix}
    ...  a001.d2.${dut_prefix}     d2.${dut_prefix}
    ...  Management                ${dut_prefix}

    ${iface_map__c1xx}=  Create Dictionary
    ...  Management                ${dut_prefix}
    ...  a001.d1.${dut_prefix}     d1.${dut_prefix}

    ${dut_belongs_to_c1xx_model}=  Does Dut Belong To C1XX Series?
    ${iface_map}=  Set Variable If  '${dut_belongs_to_c1xx_model}' == 'True'
    ...  ${iface_map__c1xx}  ${iface_map_other_than_c1xx}
    [Return]  ${iface_map}

Set ESA IPV6 Address
    ${ESA_IPV6}=  Get Host IP By Name  ${ESA}  ${True}
    Set Suite Variable  ${ESA_IPV6}
    Set Suite Variable  ${DUT_IPV6}  ${ESA_IPV6}

Set ESA2 IPV6 Address
    ${ESA2_IPV6}=  Get Host IP By Name  ${ESA2}  ${True}
    Set Suite Variable  ${ESA2_IPV6}
    Set Suite Variable  ${DUT2_IPV6}  ${ESA2_IPV6}

Set ESA IPV6 Gateway
    ${gateway_ip6}=  Evaluate  re.sub(r'\\w+$', '1', '${DUT_IPV6}')  re
    Set Gateway  ${gateway_ip6}  ipv6

Set ESA2 IPV6 Gateway
    ${gateway2_ip6}=  Evaluate  re.sub(r'\\w+$', '1', '${DUT2_IPV6}')  re
    Set Gateway  ${gateway2_ip6}  ipv6

Force IPv6 Config On Appliance
    [Arguments]  ${dut}=${ESA}  ${dut_prefix}=ESA
    ${iface_map}=  Get Network Interface Map  ${dut}
    @{ifaces}=  Get Dictionary Items  ${iface_map}
    FOR    ${iface_name}    ${iface_host}      IN      @{ifaces}
        ${iface_ip6}=  Get Host IP By Name  ${iface_host}  ${True}
        Interfaceconfig Edit  ${iface_name}
        ...  configure_ipv6=yes  ipv6_address=${iface_ip6}
        ...  prefix_length=${DATA_PREFIX}
    END
    Run Keyword If  '${dut_prefix}' == 'ESA'
    ...  Set ESA IPV6 Address
    Run Keyword If  '${dut_prefix}' == 'ESA2'
    ...  Set ESA2 IPV6 Address

    # workaround for reverse lookup ipv6 bug
    FOR  ${src_host}  IN  d1.${CLIENT}  d2.${CLIENT}
       ${relay_ip6}=  Get Host IP By Name  ${src_host}  ${True}
       Listenerconfig Edit Hostaccess Edit Sendergroup New
        ...  ${PUBLIC_LISTENER_NAME}  UNKNOWNLIST  ${relay_ip6}/64
        Listenerconfig Edit Hostaccess Edit Sendergroup New
        ...  ${PRIVATE_LISTENER_NAME}  RELAYLIST  ${relay_ip6}/64
    END
    # set IPv6 gateway
     Run Keyword If  '${dut_prefix}' == 'ESA'
     ...  Set ESA IPV6 Gateway
     Run Keyword If  '${dut_prefix}' == 'ESA2'
     ...  Set ESA2 IPV6 Gateway
    #If EASY_POV_MODE set to 1 enabling EASY POV MODE and Classic License - USE_SMART_LICENSE 0
    Run Keyword If  ${EASY_POV_MODE} == 1 and ${USE_SMART_LICENSE} == 0    Run Keywords
    ...   EasyPov Disable
    ...   EasyPov Enable

Do Save Config
    ${conf}=  Configuration Save
    ...  Save file to this appliance
    ...  encrypt_passwords=${True}
    [Return]  ${conf}

Do Restore Config From ${file}
    Configuration Load  Load a configuration file from the appliance
    ...  filename=${file}
    Commit Changes

Enable FIPS
    [Arguments]  ${always_encrypt}=yes  ${timeout}=900
    Run Keyword And Ignore Error  Close All Browsers
    Run Keyword And Ignore Error  Selenium Close

    # Check if FIPS already enabled
    ${fips_status}=  Fips Config Is Enabled

    # Enable FIPS
    ${version}=  Evaluate  ''.join(${ESA_BUILD.replace('phoebe-','').split('-')[:-1]})
    Run Keyword If  ${version} >= 1400
    ...  Run Keyword If  not ${fips_status}
    ...  FIPS Config  Enable  timeout=${timeout}
    Run Keyword If  ${version} < 1400
    ...  Run Keyword If  not ${fips_status}
    ...  FIPS Config  Enable
    ...  timeout=${timeout}  always_encrypt=${always_encrypt}
    ${was_enabled}=  Fips Config Is Enabled
    Should Be True  ${was_enabled}
    Wait Until DUT Is Accessible  wait_for_ports=22,443
    Sleep  60 seconds
    Selenium Login
    Restart CLI Session

Disable FIPS
    Run Keyword And Ignore Error  Close All Browsers
    Run Keyword And Ignore Error  Selenium Close
    ${fips_status}=  Fips Config Is Enabled
    Run Keyword If  ${fips_status}  FIPS Config  Disable
    ${was_disabled}=  Fips Config Is Enabled
    Should Not Be True  ${was_disabled}
    Wait Until DUT Is Accessible  wait_for_ports=22,443
    Sleep  60 seconds
    Selenium Login
    Restart CLI Session

Init Selenium For FIPS
    ${firefox_prefs_network.cookie.prefsMigrated}=        Set Variable   true
    ${firefox_prefs_network.http.prompt-temp-redirect}=   Set Variable   false
    Configure SSL For GUI
    Selenium Login

Get Service Pass
    [Arguments]  ${service_access_password}
    ${pass} =  Run On DUT  /data/bin/gen_pass ${service_access_password}
    [Return]  ${pass}

Configure SSC
    [Arguments]  ${feature}  ${PORT}
    ${status}    ${result}=    Run keyword and ignore error
    ...  Variable Should Exist  ${ESA2_MODEL}
    Run keyword if    "${status}" == "FAIL"
    ...  Set Suite Variable  ${ESA2_MODEL}  00000
    Run keyword if    "${status}" == "PASS" and "${ESA2_MODEL}" == "C600V"
    ...  Do SSC Setup  ${feature}  ${PORT}

Do SSC Setup
    [Arguments]  ${feature}  ${PORT}
    Set Aliases For Appliance Libraries
    Set Appliance Under Test to ESA2
    DefaultSuiteSetupForSSC
    Run keyword if   "${feature.lower()}" == "case" or "${feature.lower()}" == "graymail"
    ...  Antispam Config Case Setup  use_case=Yes
    Commit
    Run keyword if   "${feature.lower()}" == "graymail"
    ...  Add GrayMail Feature Key
    Run keyword if   "${feature.lower()}" == "graymail"
    ...  GraymailConfig Setup  use_graymail_detection=yes  use_graymail_safe_unsubscribe=yes
    Run keyword if   "${feature.lower()}" == "mcafee"
    ...  Antivirus Config Mcafee Setup  use_av=yes  license_agreement=yes
    Run keyword if   "${feature.lower()}" == "sophos"
    ...  Antivirus Config Sophos Setup  use_av=yes  license_agreement=yes
    SSC Config Enable  ${feature.lower()}  ${ESA2_IP}  ${PORT}
    Commit
    ${output} =  SSC Config Show
    Log  ${output}
    Run keyword if   "${feature.lower()}" == "case"
    ...  Edit Log Config  antispam  4
    Set Aliases For Appliance Libraries
    Set Appliance Under Test to ESA
    SSC Config Offbox  ${feature.lower()}  ${ESA2_IP}  ${PORT}
    Commit
    ${output} =  SSC Config Show
    Log  ${output}
    ${output} =  SSC Config Show  as_dictionary=yes
    ${service} =  Get From Dictionary  ${output}  ${feature}
    ${service_address} =  Get From Dictionary  ${service}  Service Address
    Should Contain  ${service_address}  ${ESA2_IP}
    Run keyword if   "${feature.lower()}" == "case"
    ...  Verify Hermes Logs  ${PORT}

Verify Hermes Logs
    [Arguments]  ${PORT}
    Verify And Wait For Log Records
    ...  wait_time=300 seconds
    ...  retry_time=10 seconds
    ...  search_path=hermes
    ...  Attempting to connect case at ${ESA2_IP}:${PORT} .*offbox.* >= 1

Edit Log Config
    [Arguments]  ${feature}  ${debug_level}
    Log Config Edit  ${feature.lower()}  log_level=${debug_level}
    Roll Over Now  ${feature.lower()}
    Commit

Load DUT License
    ${output}=  Show License
    Should Contain  ${output}  No License Installed
    Run Keyword If  '${output}' == 'No License Installed'
    ...  Copy File To DUT  %{SARF_HOME}/tests/testdata/virtual/vesalicense.xml  ${CONFIG_DIR}/

    # Checking CLI access to DUT. If cli session was closed, trying to reopen it
    ${ready}  ${out2}  Run Keyword And Ignore Error
    ...  Start CLI Session If Not Open
    Run Keyword If  '${ready}' == 'FAIL'
    ...  Fatal Error  Cli session is not available and can not be reopened!

    Load License  conf=file  conf_file=vesalicense.xml
    ${license_status}=  Show License
    Log  ${license_status}

Check Process Enabled
    [Arguments]  ${process_name}  ${status}
    ${out}=  Run On Dut  /data/bin/heimdall_svc -s ${process_name}
    Should Contain
    ...  ${out}
    ...  'up': ${status}
    Should Contain
    ...  ${out}
    ...  'enabled': ${status}

Restart Service And Check Enabled Status
    [Arguments]  ${service}  ${status}
    Run On DUT  /data/bin/heimdall_svc -r ${service}
    Wait Until Keyword Succeeds  30 sec  5 sec
    ...  Check Process Enabled  ${service}  ${status}

Unlock Admin CLI
    ${is_restricted}=  Is Admin Cli Restricted
    Run Keyword If  ${is_restricted}
    ...  Passwd
    ...  old_pwd=${DUT_ADMIN_PASSWORD}
    ...  new_pwd=${DUT_ADMIN_SSW_PASSWORD}

Verify URL Filtering Status As Connected
    ${status}  Url Filtering Get Details
    ${string}=  Convert To String  ${status}
    Should Contain  ${string}  Connected

Enable Feature Key
    [Arguments]  ${key}  ${duration}=1440000
    Feature Key Set Key  ${key}  duration=${duration}
    Commit Changes

Execute Command And Get Output
    [Arguments]  ${hostname}  ${command}  ${username}=rtestuser  ${password}=ironport  ${prompt}=]
    SSHLibrary.Open Connection  ${hostname}  timeout=60  prompt=${prompt}
    SSHLibrary.Login  ${username}  ${password}
    SSHLibrary.Write  ${command}
    ${output}=  Read Until Prompt
    SSHLibrary.Close Connection
    [Return]  ${output}

Select Cluster On Web UI
    [Arguments]  ${name}
    Select From List  xpath=//select[@name='mode']  Cluster: ${name}
    Wait Until Page Loaded

Check Feature Key Expiration
    [Arguments]  ${key}
    ${status}=  Feature Key Is Expire Key  ${key}
    Should Be True  ${status}

Update Web UI Inactivity Timeout
    [Arguments]  ${timeout}
    ${settings}=  Create Dictionary
    ...  Web UI Inactivity Timeout  ${timeout}
    Network Access Edit  ${settings}
    Commit Changes

Check Engine Version
    [Arguments]  ${engine}
    ${engine_versions}=  Services Overview Get Available Versions  engine_name=${engine}
    Log Dictionary  ${engine_versions}
    Should Contain  ${engine_versions}  version2
    [Return]  ${engine_versions}

Get Rewritten URLs From Mail Logs
    ${matches}  ${found}=  Log Search  MID .* rewritten URL.*(stage.)?secure-web(.sco)?.cisco.com.*
    Log  ${matches}
    Log  ${found}
    @{rewritten_url_list}  Create List
    FOR  ${index}  IN RANGE  ${matches}
        ${extract_url}=  Get From List  ${found}  ${index}
        ${rewritten_url}=  Replace String Using Regexp  ${extract_url}  .*'http(s)?  'http
        Append To List  ${rewritten_url_list}  ${rewritten_url}
    END
    [Return]  ${rewritten_url_list}

Remove Feature Key
    [Arguments]  ${key}
    Run Keyword If  ${USE_SMART_LICENSE} == 0
    ...  Feature Key Delete Key  ${key}

EasyPov Enable
    Feature Key Set Key  cloud  duration=2592000
    Set Global Variable  ${JOURNAL_MAIL_TO}     journal-user@journalmail.${NETWORK}
    Journal Config Enable    mailbox=Office365    journal-mail-to=${JOURNAL_MAIL_TO}
    Commit

EasyPov Disable
    Journal Config Disable
    Commit
    Remove Feature Key  cloud

