$Id: //prod/main/sarf_centos/resources/utils.txt#2 $
$DateTime: 2019/06/03 22:56:07 $
$Author: revlaksh $

*** Settings ***
Resource    set_sshlib_prompt.txt

*** Keywords ***
Restore CLI And Shell
    [Documentation]  Start Shell and CLI sessions\n
    Start Shell Session
    Run Keyword And Ignore Error
    ...  Start CLI Session If Not Open

Run Command On Host
    [Documentation]
    ...  Executes CLI command on remote host.\n
    ...              Parameters:\n
    ...                -host: host name of HTTP server you need to login\n
    ...                -username: user name\n
    ...                -password: user password\n
    ...                -prompt: user shell prompt\n
    ...                -command: command to execute\n
    ...                -shell_timeout: timeout to wait for the output\n

    [Arguments]
    ...  ${host}=${HTTP_SERVER}
    ...  ${username}=${RTESTUSER}
    ...  ${password}=${RTESTUSER_PASSWORD}
    ...  ${prompt}=\#
    ...  ${command}=${EMPTY}
    ...  ${shell_timeout}=300

    Open Connection  ${host}  prompt=${prompt}  timeout=${shell_timeout}
    Login  ${username}  ${password}
    ${out}=  SSHLibrary.Execute Command  ${command}
    Set SSHLib Prompt  ${EMPTY}
    SSHLibrary.Close Connection
    [Return]  ${out}

Start Command On Host
    [Documentation]
    ...  Executes CLI command on remote host without output checking.\n
    ...              Parameters:\n
    ...                -host: host name of HTTP server you need to login\n
    ...                -username: user name\n
    ...                -password: user password\n
    ...                -prompt: user shell prompt\n
    ...                -command: command to execute\n
    ...                -shell_timeout: timeout to wait for the output\n

    [Arguments]
    ...  ${host}=${HTTP_SERVER}
    ...  ${username}=${RTESTUSER}
    ...  ${password}=${RTESTUSER_PASSWORD}
    ...  ${prompt}=\#
    ...  ${command}=${EMPTY}
    ...  ${shell_timeout}=300

    Open Connection  ${host}  prompt=${prompt}  timeout=${shell_timeout}
    Login  ${username}  ${password}
    SSHLibrary.Start Command  ${command}
    ${out}=  Run Command On Host
    ...  host=${host}
    ...  username=${username}
    ...  password=${password}
    ...  prompt=${prompt}
    ...  command=ps axwww | grep '${command}'

    Should Not Be Empty  ${out}

Create Test File
    [Documentation]
    ...  Creates test file with given size.\n
    ...           Parameters:\n
    ...             -size: size of file to create\n
    ...             -filename: name of file to create\n

    [Arguments]
    ...  ${size}=100
    ...  ${filename}=testfile

    Run  truncate -s ${size} ${filename}

Delete Test File
    [Documentation]
    ...  Deletes test file with given name.\n
    ...           Parameters:\n
    ...             -filename: name of file to delete\n

    [Arguments]
    ...  ${filename}=testfile

    Run  rm ${filename}

Set Up Slow Connection ${rule}
    [Documentation]  Reduce connection speed between client and host to 80kbps
    ${command}=  Catenate
    ...  ipfw pipe 10 config bw 200Kbit/s &&
    ...  ipfw add 201 pipe 10 ip ${rule}
    Run On Dut  ${command}

Block Auth Server On WSA
    Run On Dut  host=${DUT}  command=ipfw add 10 deny tcp from me to ${NTLM_AUTH_SERVER}

Log Into Google Apps
    Go To  http://www.google.com/a
    Click Element  xpath=//a[@id='sign-in-open']  dont_wait
    Input Text  xpath=//input[@id='f-domain']  ironport.com
    Select From List  xpath=//*[@id='f-target']  Email
    Click Element  xpath=//input[@type='submit']
    ${source}=  Get Source
    ${status}  ${value}=  Run Keyword And Ignore Error  Should contain  ${source}  you're using unsupported browser
    Run Keyword If  '${status}' == 'PASS'  Click Element  xpath=//a[contains(text(),'No thanks')]

Fix Firefox Preferences To Disable Redirection Popup
    ${ff_profile}=  Get Firefox Profile Directory
    :FOR  ${pref}  IN  \# Mozilla User Preferences
    ...  ${EMPTY}
    ...  user_pref("capability.policy.strict.Window.alert", "noAccess");
    ...  user_pref("capability.policy.strict.Window.confirm", "noAccess");
    ...  user_pref("capability.policy.strict.Window.prompt", "noAccess");
    ...  user_pref("network.cookie.prefsMigrated", true);
    ...  user_pref("network.http.prompt-temp-redirect", 0);
    ...  ${EMPTY}
    \   Run  echo '${pref}' >> ${ff_profile}/prefs.js

Get Saml Certificate
    ${cert_cfg}=  Run On DUT  grep saml20_idp_settings /data/db/config/prox.config/data.cfg
    ${cert_name}=  Set Variable  ${cert_cfg.split(',')[8].split(':')[-1].strip('"')}
    Copy File From DUT To Remote Machine  ${CLIENT_HOSTNAME}  /data/db/certd/saml20/idp_cert_store/${cert_name}  ./${cert_name}
    Set Test Variable   ${SAML_CERT}  ${cert_name}
    [Return]  ${cert_name}

Add Cert Exception
    ${ff_profile}=  Get Firefox Profile Directory
    ${certline}=  Run  grep ${DUT} ${ff_profile}/cert_override.txt
    ${newline}=  Set Variable  ${certline.replace('${DUT}:8443', '${DUT_P1}:443')}
    Run  echo '' >> ${ff_profile}/cert_override.txt && echo '${newline}' >> ${ff_profile}/cert_override.txt && echo '' >> ${ff_profile}/cert_override.txt

Install WSA Certificate
    ${current_cert}=  Run On DUT  grep 'generated_cert_name = .*' ${PROX_CFG}
    ${current_cert}=  Set Variable  ${current_cert.split('"')[-2]}
    ${ff_profile}=  Get Firefox Profile Directory
    Copy File From DUT To Remote Machine  ${CLIENT_HOSTNAME}  /data/db/certd/${current_cert}.crt.pem  ${CERT_LOC}
    ${out}=  Run  certutil -A -n "ironport.com - QA Automation" -d ${ff_profile} -t "CTu,," -u "c" -a -i ${CERT_LOC}

Restart Squid On Upstream Proxy
    [Documentation]  Restart squid on ${UPSTRM_PROX1} machine
    Run Command On Host
    ...  host=${UPSTRM_PROX1}
    ...  command=/usr/local/etc/rc.d/squid restart

Terminate Process On Host
    [Documentation]  Terminates specified process on specified host.\n
    ...              Parameters:\n
    ...                -host: host name of HTTP server you need to login\n
    ...                -username: user name\n
    ...                -password: user password\n
    ...                -prompt: user shell prompt\n
    ...                -process_name: name of process to terminate\n
    ...                -shell_timeout: timeout to wait for the output\n
    ...                -signal: signal number in 'kill' command format. F.e. -9 for SIGKILL

    [Arguments]
    ...  ${host}=${HTTP_SERVER}
    ...  ${username}=${RTESTUSER}
    ...  ${password}=${RTESTUSER_PASSWORD}
    ...  ${prompt}=\#
    ...  ${process_name}=${EMPTY}
    ...  ${shell_timeout}=300
    ...  ${signal}=-15

    ${out}=  Run Command On Host
    ...  host=${host}  username=${username}  password=${password}  prompt=${prompt}

    ${out}=  Run Command On Host
    ...  host=${host}
    ...  username=${username}
    ...  password=${password}
    ...  prompt=${prompt}
    ...  command=ps axwww | grep '${process_name}' | grep -v grep

    Should Be Empty  ${out}

    [Return]    ${out}

Add IPFW Rule To Drop Packets From WSA TO HTTP Server
    [Documentation]  Creates IPFW Rule to drop connections from WSA to HTTP Server.\n
    ...              Parameters:\n
    ...                -dut_interface: WSA's interface to use: P1, M1 or P2\n

    [Arguments]
    ...  ${dut_interface}=${DUT_P1}
    Run Command On Host
    ...  host=${HTTP_SERVER}
    ...  username=${RTESTUSER}
    ...  password=${RTESTUSER_PASSWORD}
    ...  prompt=${EMPTY}
    ...  command=sudo ipfw add 00102 reset tcp from ${dut_interface} to me

Delete IPFW Rule That Drops Packets From WSA TO HTTP Server
    Run Command On Host
    ...  host=${HTTP_SERVER}
    ...  username=${RTESTUSER}
    ...  password=${RTESTUSER_PASSWORD}
    ...  prompt=${EMPTY}
    ...  command=sudo ipfw delete 00102

#Custom Http Server
Start Custom HTTP Server
    [Arguments]
    ...  ${server_script}=~${HTTP_USER}/custom_http_server.py
    ...  ${server_port}=8000

    Open Connection  ${HTTP_SERVER}
    Login  ${RTESTUSER}  ${RTESTUSER_PASSWORD}
    Write  python ${server_script}
    Read Until  Serving HTTP
    ${out}=  Execute Command  sockstat -l | grep ${server_port} | grep -v grep
    Set SSHLib Prompt  ${EMPTY}
    Should Not Be Empty  ${out}

Stop Process On HTTP Server Which Listen ${port} Port
    Open Connection  ${HTTP_SERVER}
    Login  ${RTESTUSER}  ${RTESTUSER_PASSWORD}
    Execute Command  sockstat -l | grep ${port} | grep -v grep | awk '{print $3}' | xargs sudo kill -9
    ${out}=  Execute Command  sockstat -l | grep ${port} | grep -v grep
    Set SSHLib Prompt  ${EMPTY}
    Should Be Empty  ${out}
