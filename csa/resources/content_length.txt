# $Id: //prod/main/sarf_centos/resources/content_length.txt#2 $
# $DateTime: 2019/06/03 22:56:07 $
# $Author: revlaksh $

*** Settings ***
Variables  constants.py
Resource   ftp-over-http.txt
Resource   ftp.txt

*** Variables ***
${OMS_POLICY}   OMSPolicy01

*** Keywords ***
Generate Headers
    [Arguments]  ${content_length}  ${content}=${EMPTY}
    ${headers}=  Set Variable  headers.txt
    Open Connection    ${CLIENT_HOSTNAME}
    Login    ${RTESTUSER}    ${TESTUSER_PASSWORD}
    Execute Command  echo "POST http://${FTP_SERVER}:8080" >> ${headers}
    Execute Command  echo "User-Agent: Java/1.6.0_07" >> ${headers}
    Execute Command  echo "Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2" >> ${headers}
    Execute Command  echo "Content-type: application/x-www-form-urlencoded" >> ${headers}
    Execute Command  echo "Content-Length: ${content_length}" >> ${headers}
    Execute Command  echo "X-IMForwards: 20" >> ${headers}
    Execute Command  echo >> ${headers}
    ${content_default}=  Generate Random String  ${content_length}  [LOWER]
    Execute Command  echo "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890" >> ${headers}
    ${content}=  Set Variable If  '${content}' == '${EMPTY}'  ${content_default}
    Execute Command  echo "${content}" >> ${headers}
    Execute Command  echo >> ${headers}
    ${header_content}=  Execute Command  cat ${headers}
    Log  ${header_content}

Generate Server Reply
    [Arguments]  ${content_length}=${NULL}  ${two_cl_headers}=${NULL}
    ${server_reply}=  Set Variable  server_reply.txt
    Open Connection  ${FTP_SERVER}
    Login  ${RTESTUSER}  ${FTPUSER_PASSWORD}
    Execute Command  echo "HTTP/1.1 200 OK" >> ${server_reply}
    Execute Command  echo "Connection: close" >> ${server_reply}
    Run Keyword If  '${content_length}' != '${NULL}'  Execute Command  echo "Content-Length: ${content_length}" >> ${server_reply}
    Run Keyword If  '${two_cl_headers}' != '${NULL}'  Execute Command  echo "Content-Length: 0" >> ${server_reply}
    Execute Command  echo "Content-type: application/x-zip-compressed" >> ${server_reply}
    Execute Command  echo >> ${server_reply}
    Execute Command  echo "Using google is fun" >> ${server_reply}
    Execute Command  echo >> ${server_reply}
    ${header_content}=  Execute Command  cat ${server_reply}
    Log  ${server_reply}
    Close Connection

Content Length Suite Setup
    Set Suite Variable  ${SSW_MODE}  P1
    DefaultTestSuiteSetup
    Change WSA Timeout To 30s
    ${config_file} =    Configuration File Save
    Set Suite Variable  ${DUT_CONFIGURATION}  ${config_file}

Content Length Suite Teardown
    DefaultTestSuiteTeardown

Change WSA Timeout
    [Arguments]  ${timeout}
    Web Proxy Edit Settings  persistent_timeout_client=${timeout}
    ...  persistent_timeout_server=${timeout}
    ...  in_use_timeout_client=${timeout}
    ...  in_use_timeout_server=${timeout}
    Commit Changes

Change WSA Timeout To 30s
    Change WSA Timeout  30

Default WSA Configuration For HTTP
    Identities Add Policy  ${IDENTITY}  protocol=all  subnet=${CLIENT_SUBNET}
    Access Policies Add  ${POLICY}  identity=${IDENTITY}

Configure WSA To Use External DLP
    External Dlp Servers Edit Servers
    ...  ${EX_DLP_SERVER}%${EX_DLP_SERVER_PORT}%${EX_DLP_RECONNECTIONS}%${EX_DLP_SERVICE_URL}
    Offbox Dlp Policies Add  ${EX_DLP_POLICY}
    ...  identities=${IDENTITY}
    Offbox Dlp Policies Edit Destinations  ${EX_DLP_POLICY}
    ...  settings_type=custom
    ...  scan_uploads=all
    Commit Changes

Configure OMS Policy To ${action} ${target1} ${target2} By ${scanner1} ${scanner2}
    ${target1}=  Set Variable  ${target1.lower()}
    Should Be True     ['no', 'all', 'category'].__contains__('${target1}')    Invalid target1; should be 'No', 'All' or 'Cat>
    ${action}=  Set Variable  ${action.lower()}
    Should Be True     ['block', 'monitor'].__contains__('${action}')    Invalid action; should be 'Block' or 'Monitor'
    ${action}=  Set Variable If
    ...  '${target1}' == 'category'  monitor
    ...  '${action}' == 'block'  block
    ...  '${action}' == 'monitor'  monitor
    ${dest_to_scan}=  Set Variable If
    ...  '${target1}' == 'no'  no
    ...  '${target1}' == 'all'  all
    ...  '${target1}' == 'category'  all
    ${target2}=  Set Variable  ${target2.lower()}
    ${category}=  Set Variable If
    ...  '${target2}' != 'uploads'  ${target2.upper()}
    ${amw_actions}  Set Variable If
    ...  '${target2}' != 'uploads'  ${mwcats.${category}}:Block
    ...  '${target2}' == 'uploads'  ${None}
    ${scanner1}=  Set Variable  ${scanner1.lower()}
    Should Be True     ['webroot', 'only'].__contains__('${scanner1}')    Invalid scanner1; should be 'Webroot' or 'Only'
    ${scanner2}=  Set Variable  ${scanner2.lower()}
    Should Be True     ['only', 'mcafee', 'sophos'].__contains__('${scanner2}')    Invalid scanner2; should be 'Only', 'McAfe>
    ${webroot}=  Set Variable If
    ...  '${scanner1}' == 'webroot'  ${True}
    ...  '${scanner1}' == 'only'  ${False}
    ${av}=  Set Variable If
    ...  '${scanner2}' == 'only'  sophos:disable
    ...  '${scanner2}' == 'mcafee'  mcafee:enable
    ...  '${scanner2}' == 'sophos'  sophos:enable
    OMS Policies Add  ${OMS_POLICY}  identities=${IDENTITY}
    OMS Policies Edit Destinations   ${OMS_POLICY}  custom  dest_to_scan=${dest_to_scan}
    OMS Policies Edit AMW Filters    ${OMS_POLICY}  custom
    ...     webroot=${webroot}
    ...     av=${av}
    ...     amw_actions=${amw_actions}
    ...     amw_select_all=Malware:${action}, Other:${action}
    Commit Changes

Remove Generated Files
    Run Command On Host
    ...  host=${FTP_SERVER}
    ...  username=${RTESTUSER}
    ...  password=${RTESTUSER_PASSWORD}
    ...  prompt=${EMPTY}
    ...  command=rm server_reply.txt
    Run Command On Host
    ...  host=${CLIENT_HOSTNAME}
    ...  username=${RTESTUSER}
    ...  password=${RTESTUSER_PASSWORD}
    ...  prompt=${EMPTY}
    ...  command=rm headers.txt

Close Netcat On Server
    Run Command On Host
    ...  host=${FTP_SERVER}
    ...  username=${RTESTUSER}
    ...  password=${RTESTUSER_PASSWORD}
    ...  prompt=${EMPTY}
    ...  command=ps ax | grep nc | awk '{print $1}' | xargs kill -9

Remove TCP Reset Rule
    ${output}=  Run Command On Host
    ...  host=${HTTP_SERVER}
    ...  username=${RTESTUSER}
    ...  password=${RTESTUSER_PASSWORD}
    ...  prompt=${EMPTY}
    ...  command=ipfw delete 100

Post File With Content Less Than Actual
    Set Test Variable  ${timeout}  30

    #Setting client and server headers
    Generate Headers  120  ${POST_CONTENT}
    Generate Server Reply  20

    #Starting netcat with server reply headers
    Open Connection  ${FTP_SERVER}
    Login  ${RTESTUSER}  ${FTPUSER_PASSWORD}
    Start Command  nc -l 8080 < server_reply.txt

    #Sending post request to server with client headers
    Filter Access Log Create Baseline
    Open Connection  ${CLIENT_HOSTNAME}
    Login  ${RTESTUSER}  ${TESTUSER_PASSWORD}
    Execute Command  nc ${DUT_P1} 3128 < headers.txt
    Sleep  ${timeout}s
    Filter Access Log Check  ${baseline_accesslog}  .*200.*POST.*${FTP_SERVER}.*

Post File With Content Null
    Set Test Variable  ${timeout}  30

    #Setting client and server headers (without content-length)
    Generate Headers  0  ${POST_CONTENT}
    Generate Server Reply

    Open Connection  ${FTP_SERVER}
    Login  ${RTESTUSER}  ${FTPUSER_PASSWORD}
    Start Command  nc -l 8080 < server_reply.txt

    Filter Access Log Create Baseline
    Open Connection  ${CLIENT_HOSTNAME}
    Login  ${RTESTUSER}  ${TESTUSER_PASSWORD}
    ${out}=  Execute Command  nc ${DUT_P1} 3128 < headers.txt
    Should Contain  ${out}  HTTP/1.0 200 OK
    Sleep  ${timeout}s
    Filter Access Log Check  ${baseline_accesslog}  .*TCP_MISS.*200.*POST.*${FTP_SERVER}.*

Post File With Two Content Headers
    Set Test Variable  ${TEST_FILE}  test_file_40M
    Set Test Variable  ${HTTP_URL}  http://${HTTP_SERVER}/cgi-bin/post.py
    Run  truncate -s 40M ${TEST_FILE}

    Send HTTP Request And Check Logs
    ...  url=${HTTP_URL}
    ...  log_regexp=.*(200|400).*POST.*${HTTP_URL}.*
    ...  additional=-H "Content-Length: 1029" -H "Content-Length: 100" -F foo=@${TEST_FILE}

Post Data Content Less Actual And Server Resets TCP
    [Arguments]  ${timeout}=30

    #Waiting for 100 Continue and sending some content to server
    Set SSHLib Timeout  10 seconds
    Open Connection  ${CLIENT_HOSTNAME}  telnet_session
    Login  ${TESTUSER}  ${TESTUSER_PASSWORD}
    Set SSHLib Prompt  ${EMPTY}
    Write  telnet ${IPV_PARAM} ${DUT_P1} 3128
    ${out}=  Read Until  Connected
    Write  POST http://${FTP_SERVER} HTTP/1.1
    Read
    Write  Host: ${FTP_SERVER}
    Read
    Write  User-Agent: Mozilla/5.0 (Windows NT 5.2; rv:6.0.2) Gecko/20100101 Firefox/6.0.2
    Read
    Write  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Read
    Write  Accept-Language: en-us,en;q=0.5
    Read
    Write  Accept-Encoding: gzip, deflate
    Read
    Write  Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
    Read
    Write  Connection: keep-alive
    Read
    Write  Content-Type: application/x-www-form-urlencoded
    Read
    Write  Content-Length: 26
    Read
    Write  Expect: 100-continue
    Write  ${EMPTY}
    ${out}=  Read Until  HTTP/1.1 100 Continue
    Write  ${EMPTY}
    Write  some content

    #TCP reset on http server
    Run Command On Host
    ...  host=${HTTP_SERVER}
    ...  username=${RTESTUSER}
    ...  password=${RTESTUSER_PASSWORD}
    ...  prompt=${EMPTY}
    ...  command=ipfw add 100 reset tcp from me to ${DUT_P1_IP}

    #Continue to send content (less than actual)
    Switch Connection  telnet_session
    Read
    Write  more content

    Sleep  ${timeout}s
    Filter Access Log Check    ${baseline_accesslog}  .*${CLIENT_IP}.*504.*http://${FTP_SERVER}.*
