# $Id: //prod/main/sarf_centos/resources/amp.txt#2 $
#$DateTime: 2019/06/03 22:56:07 $
#$Author: revlaksh $

*** Settings ***
Resource  ids80.txt
Resource  wsa/global.txt

*** Variables ***
# AMP cloud server data
${amp_cloud_server}  amp-cloud-sa1-capnet.qa1.immunet.com
${amp_analysis_private_cloud_server}  https://zebra.duckdns.org
${pk_for_amp_cloud_server}  %{SARF_HOME}/tests/testdata/pk_for_amp_cloud_server
${amp_add_arg}  -c /etc/immunet/server.xml.poke
${pk_for_rep_immunet_cloud_server}  %{SARF_HOME}/tests/testdata/pk_for_rep_immunet_cloud_server.pem
${amp_analysis_public_cloud_server}     https://panacea.threatgrid.com

${HEIMDALL_AMP_LOGS}  /data/log/heimdall/amp/amp.current
${AMP_LOGS}  /data/pub/amp_logs/amp.current
${AMP_CFG_FILE}  /data/db/config/fireamp.config/data.cfg
${AMP_INI_FILE}  /data/fire_amp/fireamp.ini
${PUB_AMP_LOGS}  /data/pub/amp_logs/amp.current

# Test data
${HTTP_SERVER_FOLDER}  test-data/amp
${HTTP_SERVER_FILES_LOCATION}  /var/www/html/${HTTP_SERVER_FOLDER}
${HTTP_SERVER_FILES_URL}  http://${HTTP_SERVER}/${HTTP_SERVER_FOLDER}
${FTP_SERVER_FILES_URL}  ftp://${FTP_SERVER}/${HTTP_SERVER_FOLDER}
${custom_exe_file_location}  %{SARF_HOME}/tests/testdata/puttygen.exe
${custom_file_url}  ${HTTP_SERVER_FILES_URL}/dc_058.JPG.zip
${custom_exe_file_url}  ${HTTP_SERVER_FILES_URL}/puttygen.exe

# keyword variables
${adaptive_scaning}  //input[@id='adaptivescanning_enabled']
${advanced_link_loc}  //*[@id='arrow_closed']
${rep_advanced_link_loc}  //*[@id='rep_arrow_closed']
${analysis_advanced_link_loc}  //*[@id='analysis_arrow_closed']
${cloud_server_pool_loc}  //th[contains(text(),'Cloud Server Pool:')]
${amp_cloud_server_pool_loc}  //*[@id='amp_file_rep_fireamprep_cloud_server_pool']
${adv_rep_cloud_server_pool_loc}  //*[@id='rep_cloud_server_pool']
${amp_file_analysis_loc}  //*[@id='amp_file_analysis_analysis_server_url']
${adv_amp_file_analysis_loc}  //*[@id='analysis_server_url']
${adv_amp_file_reputation_loc}  //*[@id='reputation_server_url']
${amp_file_rep_threshold_loc}  //*[@id='amp_file_rep_fireamprep_threshold']
${amp_heartbeat_interval}  //input[@id='amp_file_rep_fireamprep_heartbeat_interval']
${policy_amp_link}  //a[contains(@href,'web_security_manager/proxy_security/policy_groups_anti_malware')]
${amp_block_link}  //table[contains(@id,'fireamp_custom')]//*[contains(@id,'state_block')]
${amp_scan_link}  //table[contains(@id,'fireamp_custom')]//*[contains(@id,'state_scan')]
${client_gui_id_loc}  //*[contains(text(),'Client ID (Reference Only):')]/../td/table/tbody/tr[1]/td
${adv_client_gui_id_loc}  //*[@id='rep_advanced_shown']/table/tbody/tr[6]/td
${vrt_adv_client_gui_id_loc}  //*[@id='analysis_advanced_shown']//th[contains(text(),'File Analysis Client ID:')]/../td
${amp_reputation_threshold_option}  //input[@id='amp_file_rep_fireamp_use_cloud_rep_threshold_0']
${adv_rep_server_list}      //*[@id='reputation_server_list']
${adv_analysis_server_list}   //*[@id='analysis_server_list']
${rep_priv_cloud_public_key_button}   //*[@id='rep_cert_file']
${adv_rep_upload_cert}    //*[@id='rep_upload_cert']
${filerep_use_ssl}  //input[@id='amp_file_rep_fireamprep_use_ssl_settings']

*** Keyword ***
Edit AMP Advanced Settings
    [Arguments]  ${amp_server}=${amp_cloud_server}  ${file_analysis_server}=default  ${reputation_threshold}=60  ${adaptive_scanning}=enable
    Navigate To  Security Services  Anti-Malware and Reputation
    Click Button  Edit Global Settings...
    Wait Until Page Contains Element  ${advanced_link_loc}  30s
    Click Element  ${advanced_link_loc}  don't wait
    ##The cloud server pool is not displayed in older versions(<9.0)
    Run Keyword And Ignore Error  Wait Until Page Contains Element  ${cloud_server_pool_loc}  30s
    ${status}  Run Keyword And Ignore Error  Page Should Contain Element  ${rep_advanced_link_loc}
    Run Keyword If  ${status}[0] == 'PASS'  Configure File Reputation Server Advanced
    Run Keyword Unless  ${status}[0] == 'PASS'  Configure File Reputation Server
    Wait Until Page Contains Element  ${amp_file_rep_threshold_loc}  30s
    Click Element  ${amp_reputation_threshold_option}  don't wait
    Input Text  ${amp_file_rep_threshold_loc}  ${reputation_threshold}
    @{value}  Run Keyword And Ignore Error  Checkbox Should Be Selected  ${filerep_use_ssl}
    Run Keyword If  '@{value}[0]'=='PASS'
    ...  Click Element  ${filerep_use_ssl}  don't wait
    ${status}  Run Keyword And Ignore Error  Page Should Contain Element  ${analysis_advanced_link_loc}
    Run Keyword If  ${status}[0] == 'PASS'  Configure File Analysis Server Advanced
    Run Keyword Unless  ${status}[0] == 'PASS'  Configure File Analysis Server
    @{value}  Run Keyword And Ignore Error  Checkbox Should Be Selected  ${adaptive_scaning}
    Run Keyword If  '@{value}[0]'=='PASS' and '${adaptive_scanning}'=='disable'
    ...  Click Element  ${adaptive_scaning}  don't wait
    Run Keyword If  '@{value}[0]'=='FAIL' and '${adaptive_scanning}'=='enable'
    ...  Click Element  ${adaptive_scaning}  don't wait
    Click Button  Submit

Configure File Reputation Server Advanced
    Click Element  ${rep_advanced_link_loc}  don't wait
    ###In 911 the list to select private cloud server is not available. Hence added the line below
    ${status}  ${message}  Run Keyword And Ignore Error  Wait Until Page Contains Element  ${cloud_server_pool_loc}   10s
    Run Keyword If  '${status}' == 'PASS'  Input Text  xpath=${amp_cloud_server_pool_loc}  ${amp_cloud_server}
    Run Keyword Unless  '${status}' == 'PASS'  Select Reputation Cloud Server From List

Select Reputation Cloud Server From List
    Run Keyword If  '${amp_server}' == 'default'  Select From List  xpath=${adv_rep_server_list}  AMERICAS (cloud-sa.amp.sourcefire.com)
    Run Keyword Unless  '${amp_server}' == 'default'  Select Reputation Private Cloud

Configure File Reputation Server
    Run Keyword If  '${amp_server}' == 'default'  Set Suite Variable  ${rep_server}  ${amp_cloud_server}
    Run Keyword Unless  '${amp_server}' == 'default'  Set Suite Variable  ${rep_server}  ${amp_server}
    ${fr_status}  Run Keyword And Ignore Error  Page Should Contain Element  ${amp_cloud_server_pool_loc}
    Run Keyword If  ${fr_status}[0] == 'PASS'  Input Text  ${amp_cloud_server_pool_loc}  ${rep_server}

Configure File Analysis Server
    Run Keyword If  '${file_analysis_server}' == 'default'  Set Suite Variable  ${fa_server}  ${amp_analysis_public_cloud_server}
    Run Keyword Unless  '${file_analysis_server}' == 'default'  Set Suite Variable  ${fa_server}  ${file_analysis_server}
    ${fa_status}  Run Keyword And Ignore Error  Page Should Contain Element  ${amp_file_analysis_loc}
    Run Keyword If  ${fa_status}[0] == 'PASS'  Input Text  ${amp_file_analysis_loc}  ${fa_server}

Configure File Analysis Server Advanced
    Click Element  ${analysis_advanced_link_loc}  don't wait
    Run Keyword If  '${file_analysis_server}' == 'default'
    ...  Select From List  xpath=${adv_analysis_server_list}  https://panacea.threatgrid.com
    Run Keyword Unless  '${file_analysis_server}' == 'default'  Select Analysis Private Cloud

Select Reputation Private Cloud 
    Select From List  xpath=${adv_rep_server_list}  Private Cloud
    Input Text  xpath=${adv_amp_file_reputation_loc}   ${amp_server}
    Choose File  ${rep_priv_cloud_public_key_button}  ${pk_for_rep_immunet_cloud_server}
    Click Button  ${adv_rep_upload_cert}
    Wait Until Page Contains Element  ${advanced_link_loc}  30s
    Click Element  ${advanced_link_loc}  don't wait
    Wait Until Page Contains Element  ${rep_advanced_link_loc}  30s
    Click Element  ${rep_advanced_link_loc}  don't wait

Select Analysis Private Cloud
    Select From List  xpath=//*[@id='analysis_server_list']  private
    Input Text  xpath=${adv_amp_file_analysis_loc}  ${file_analysis_server}

Set Reputation Threshold
    Navigate To  Security Services  Anti-Malware and Reputation
    Click Button  Edit Global Settings...
    Wait Until Page Contains Element  ${advanced_link_loc}  30s
    Click Element  xpath=//div[@id='arrow_closed']/img  dont_wait
    ${status}  ${msg}  Run Keyword And Ignore Error   Page Should Contain Element  ${rep_advanced_link_loc}
    Run Keyword If  '${status}' == 'PASS'  Click Element  ${rep_advanced_link_loc}
    Wait Until Page Contains Element  ${amp_file_rep_threshold_loc}  30s
    Click Element  ${amp_reputation_threshold_option}  don't wait
    Input Text  xpath=//input[@id='amp_file_rep_fireamprep_threshold']  60
    @{value}  Run Keyword And Ignore Error  Checkbox Should Be Selected  ${filerep_use_ssl}
    Run Keyword If  '@{value}[0]'=='PASS'
    ...  Click Element  ${filerep_use_ssl}  don't wait
    Click Button  Submit

Set Amp Heartbeat Interval
    [Arguments]  ${heartbeat_interval_value}
    Navigate To  Security Services  Anti-Malware and Reputation
    Click Button  Edit Global Settings...
    Wait Until Page Contains Element  ${advanced_link_loc}  30s
    Click Element  xpath=//div[@id='arrow_closed']/img  dont_wait
    ${status}  ${msg}  Run Keyword And Ignore Error  Page Should Contain Element  ${rep_advanced_link_loc}
    Run Keyword If  '${status}' == 'PASS'
    ...  Click Element  xpath=.//*[@id='rep_arrow_closed']  dont_wait
    Wait Until Page Contains Element  ${amp_heartbeat_interval}  30s
    Input Text  xpath=//input[@id='amp_file_rep_fireamprep_heartbeat_interval']  ${heartbeat_interval_value}
    Click Button  Submit

Edit Global Policy
    Navigate To  Web Security Manager  Access Policies
    Wait Until Page Contains Element  ${policy_amp_link}  30s
    Click Element  ${policy_amp_link}  don't wait
    Wait Until Page Contains Element  ${amp_block_link}  30s
    Click Element  ${amp_block_link}  don't wait
    Click Button  Submit
    Commit Changes

Set WSA Proxy Cache
    [Arguments]  ${status}=disable
    Navigate To  Security Services  Web Proxy
    Click Button  Edit Settings...
    @{value}  Run Keyword And Ignore Error  Checkbox Should Be Selected  //input[@id='cacheEnabled']
    Run Keyword If  '@{value}[0]'=='PASS' and '${status}'=='disable'
    ...  Click Element  //input[@id='cacheEnabled']  don't wait
    Run Keyword If  '@{value}[0]'=='FAIL' and '${status}'=='enable'
    ...  Click Element  //input[@id='cacheEnabled']  don't wait
    Click Button  Submit
    Commit Changes

Copy File For AMP File Analysis
    [Arguments]  ${file_location}
    Run  chmod 777 ${file_location}
    Scp File To Service Host  ${file_location}

Prepare File For AMP File Analysis
    [Arguments]  ${exe_file_location}=${custom_exe_file_location}
    ${current_date} =  Run  date
    Run  chmod 777 ${exe_file_location}
    Run  echo ${current_date} >> ${exe_file_location}
    Scp File To Service Host  ${exe_file_location}

Change File For AMP File Analysis
    [Documentation]  This keyword changes file and keeps file size the same.
    ...  Changed file is uploaded to ${HTTP_SERVER} web, ftp server.
    [Arguments]  ${file_location}
    # Replace 1k block in target file with random data
    Run  chmod 777 ${file_location}
    Run  dd if=/dev/urandom of=${file_location} bs=1k seek=2 conv=notrunc count=1
    Scp File To Service Host  ${file_location}

Scp File To Service Host
    [Arguments]  ${file_location}  ${last_message}=.*100%.*
    ${cmd} =  Set Variable  scp ${file_location} ${RTESTUSER}@${HTTP_SERVER}:${HTTP_SERVER_FILES_LOCATION}
    Run On Service Host  mkdir -p ${HTTP_SERVER_FILES_LOCATION}  $
    Run On Client Host  ${cmd}  ${last_message}

Run On Service Host
    [Arguments]  ${cmd}  ${last_message}
    Run On Client Host  ssh ${RTESTUSER}@${HTTP_SERVER} ${cmd}  ${last_message}

Run On Client Host
    [Arguments]  ${cmd}  ${last_message}=.*100%.*
    Set SSHLib Timeout  160 seconds
    Open Connection  ${CLIENT_HOSTNAME}  client
    Login  ${RTESTUSER}  ${TESTUSER_PASSWORD}
    Set SSHLib Prompt  :
    Write  ${cmd}
    ${out}=  Read Until Regexp  .*\\(yes\\/no\\)\\?|.*assword\\:
    ${add_to_known_hosts}=  Set Variable If  '${out.find('yes')}' !='-1'  yes  ${EMPTY}
    Run Keyword If  '${add_to_known_hosts}' != '${EMPTY}'  Write  ${add_to_known_hosts}
    Sleep  5s
    Write  ${TESTUSER_PASSWORD}
    Sleep  5s
    ${out}=  Read Until Regexp  ${last_message}
    Close Connection
    Log  ${out}
    [Return]  ${out}

Get File Poke Info
    [Arguments]  ${sha256}
    ${out} =  Run Command On Cloud Server  echo "${sha256},4," | /opt/sourcefire/poke/bin/poke -v ${amp_add_arg}
    [Return]  ${out}

Run Command On Cloud Server
    [Arguments]  ${command}
    Run  chmod 600 ${pk_for_amp_cloud_server}
    Set SSHLib Timeout   60s
    Set SSHLib Prompt  ${EMPTY}
    Open Connection  ${DUT}
    Login   ${RTESTUSER}  ${RTESTUSER_PASSWORD}
    Write   ssh testuser@vm30bsd0199.ibqa.sgg.cisco.com
    ${status}  ${message}  Run Keyword And Ignore Error  Read Until   ?
    Run Keyword If  '${status}' == 'PASS'  Write  yes
    Run Keyword If  '${status}' == 'PASS'  Read Until  password:
    Write  ironport
    Read Until   $
    Write  cd /home/testuser
    Read Until   $
    Write  ssh -i pvt_key_openssh_format vdv@amp-cloud-sa1-capnet.qa1.immunet.com
    ${out}  Read Until  $
    Should Contain   ${out}  vdv@cloud-sa1-int.qa1.immunet.com
    Write   ${command}
    ${out}   Read Until   $
    Close Connection
    Set SSHLib Prompt  ${EMPTY}
    [Return]   ${out}
    

Set File Poke Info
    [Arguments]  ${sha256}  ${disposition}  ${score}=80  ${samples_bs}=2  ${malware_threat_name}=${EMPTY}
    ${out} =  Run Command On Cloud Server  echo "${sha256},4,${disposition},${score},${samples_bs},${malware_threat_name}" | /opt/sourcefire/poke/bin/poke -z ${amp_add_arg}
    Should Contain  ${out}  OK
    [Return]  ${out}

Check Amp Ping Init
    [Arguments]  ${log}
    ${pattern} =  Set Variable  *ping response, no detections*
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern}
    Should Not Be Empty  ${line}  msg=Expected ping message not found

Check Retro In Logs
    [Arguments]  ${sha256}  ${disposition}
    :FOR  ${index}  IN RANGE  20
    \  @{value} =  Run Keyword And Ignore Error  Check Retro Logs  ${sha256}  ${disposition}
    \  Run Keyword If  '@{value}[0]'=='PASS'  Exit For Loop
    Run Keyword If  '@{value}[0]'=='FAIL'  Fail  Retro event(SHA256::${sha256}) not found

Check Retro Logs
    [Arguments]  ${sha256}  ${disposition}=1
    ${baseline_amplog} =  Filter Log Create Baseline  ${HEIMDALL_AMP_LOGS}
    Sleep  4m
    ${filtered_lines_amplog}  ${filtered_count} =  Filter Log  ${HEIMDALL_AMP_LOGS}  ${baseline_amplog}
    Log  Filtered Entries From Log(${HEIMDALL_AMP_LOGS}):\n ${filtered_lines_amplog}
    Log  ${filtered_count}
    Should Contain  ${filtered_lines_amplog}  Retrospective event, SHA256[${sha256}] disposition [${disposition}]

Set File Retro Info
    [Arguments]  ${guid}  ${sha256}  ${disposition}
    ${out} =  Run Command On Cloud Server  echo "${guid},${sha256},${disposition}" | /opt/sourcefire/retro/bin/retro ${amp_add_arg} -r
    [Return]  ${out}

Get File Md5
    [Arguments]  ${file}=${custom_exe_file_location}
    ${out} =  Run  md5sum ${file}
    ${tmp}  ${file_md5} =  Should Match Regexp  ${out}  (^\\w+)
    [Return]  ${file_md5}

Get File Sha256
    [Arguments]  ${file}=${custom_exe_file_location}
    ${out} =  Run  sha256sum ${file}
    ${tmp}  ${file_sha256} =  Should Match Regexp  ${out}  (^\\w+)
    [Return]  ${file_sha256}

Check Md5
    [Arguments]  ${file_path}  ${expected_md5}
    ${actual_md5} =  Get File Md5  ${file_path}
    Should Be Equal As Strings  ${actual_md5}  ${expected_md5}

Get File Sha256 Uppercase
    [Arguments]  ${sha256}
    ${sha256_upper} =  Run  (echo ${sha256} | tr '[:lower:]' '[:upper:]')
    [Return]  ${sha256_upper}

Get File Sha256 Short
    [Arguments]  ${sha256}
    ${sha256_begin} =  Get Substring  ${sha256}  0  8
    ${sha256_end} =  Get Substring  ${sha256}  -8
    ${short_sha256} =  Catenate    SEPARATOR=...  ${sha256_begin}  ${sha256_end}
    [Return]  ${short_sha256}

Check Amp Logs
    [Arguments]  ${sha256}  ${baseline}  ${amp_timeout}=2400
    ${iterations} =  Evaluate  int(${amp_timeout}/100)
    :FOR  ${index}  IN RANGE  ${iterations}
    \  @{value} =  Run Keyword And Ignore Error  Check Amp In Logs  ${sha256}  ${baseline}
    \  Run Keyword If  '@{value}[0]'=='PASS'  Exit For Loop
    Run Keyword If  '@{value}[0]'=='FAIL'  Fail  File(SHA256::${sha256}) was not uploaded

Check Amp Upload Logs
    [Arguments]  ${sha256}  ${baseline}
    ${iterations} =  Set Variable  3
    :FOR  ${index}  IN RANGE  ${iterations}
    \  @{value} =  Run Keyword And Ignore Error  Check Amp Upload In Logs  ${sha256}  ${baseline}
    \  Run Keyword If  '@{value}[0]'=='PASS'  Exit For Loop
    Run Keyword If  '@{value}[0]'=='FAIL'  Fail  File(SHA256::${sha256}) was not uploaded

Check Amp Upload In Logs
    [Arguments]  ${sha256}  ${baseline}
    Sleep  10s
    ${out}  ${count} =  Filter Log  ${HEIMDALL_AMP_LOGS}  ${baseline}
    Log  Filtered Entries From Log(${HEIMDALL_AMP_LOGS}):\n ${out}
    Should Match Regexp  ${out}  .*File SHA256\\[${sha256}\\].*successfully uploaded to the VRT server.*

Check Amp Upload Failed In Logs Because of Dummy Proxy
    [Arguments]  ${baseline}
    Sleep  10s
    ${out}  ${count} =  Filter Log  ${HEIMDALL_AMP_LOGS}  ${baseline}
    Log  Filtered Entries From Log(${HEIMDALL_AMP_LOGS}):\n ${out}
    Should Match Regexp  ${out}  .*curl_easy_perform failed:.*

Check TGCS curl request timeout In Logs
    [Arguments]  ${sha256}  ${log}
    Log  ${log}
    Should Match Regexp  ${log}  .*AMP-ERROR: curl_easy_perform to get file status.*failed: 28.*
    Should Match Regexp  ${log}  .*Query type = 1.*
    Should Match Regexp  ${log}  .*AMP-DEBUG: sha list.*${sha256}.*

Check TGCS classification In Logs
    [Arguments]  ${class}  ${sha256}  ${log}
    Log  ${log}
    Should Match Regexp  ${log}  .*AMP-DEBUG: SHA256 from Status List Response.*${sha256}.*
    Should Match Regexp  ${log}  .*AMP-INFO: Received classification status \\[${class}\\].*

Check Adjusted Verdict
    [Arguments]  ${sha256}  ${log}  ${original_verdict}  ${verdict_source}  ${verdict_from}
    Log  ${log}
    ${pattern1} =  Set Variable  *Adjusted verdict*${sha256}*
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern1}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    Should Contain  ${line}  ${original_verdict}
    Should Contain  ${line}  ${verdict_source}
    Should Contain  ${line}  ${verdict_from}

Check Amp No Upload Logs
    [Arguments]  ${sha256}  ${baseline}
    ${iterations} =  Set Variable  3
    :FOR  ${index}  IN RANGE  ${iterations}
    \  @{value} =  Run Keyword And Ignore Error  Check Amp No Upload In Logs  ${sha256}  ${baseline}
    \  Run Keyword If  '@{value}[0]'=='PASS'  Exit For Loop
    Run Keyword If  '@{value}[0]'=='FAIL'  Fail  File(SHA256::${sha256}) was uploaded

Check Amp No Upload In Logs
    [Arguments]  ${sha256}  ${baseline}
    Sleep  10s
    ${out}  ${count} =  Filter Log  ${HEIMDALL_AMP_LOGS}  ${baseline}
    Log  Filtered Entries From Log(${HEIMDALL_AMP_LOGS}):\n ${out}
    Should Match Regexp  ${out}  .*File.*SHA256.*${sha256}.*is known to the VRT server, skipping upload.*

Check PUB Amp No Upload In Logs
    [Arguments]  ${sha256}  ${baseline}
    Sleep  10s
    ${out}  ${count} =  Filter Log  ${PUB_AMP_LOGS}  ${baseline}
    Log  Filtered Entries From Log(${PUB_AMP_LOGS}):\n ${out}
    Should Match Regexp  ${out}  .*File analysis upload skipped.*SHA256.*${sha256}.*

Check Amp In Logs
    [Arguments]  ${sha256}  ${baseline}  ${timeout}=100s
    Sleep  ${timeout}
    ${out}  ${filtered_count} =  Filter Log  ${AMP_LOGS}  ${baseline}
    #Log the filtered lines for debugging
    Log  Filtered Entries From Log(${AMP_LOGS}):\n ${out}
    #Log the count of filtered lines
    Log  ${filtered_count}
    Should Match Regexp  ${out}  .*File uploaded for analysis.*SHA256: ${sha256}.*
    Should Match Regexp  ${out}  .*Sandbo.*status event received.*
    Should Match Regexp  ${out}   .*[Ff]ile [aA]nalysis [Cc]omplete.*

Check No Amp In Logs
    [Arguments]  ${sha256}  ${out}
    _No Amp Message  ${sha256}  ${out}
    ${iterations} =  Set Variable  10
    ${baseline} =  Filter Log Create Baseline  ${HEIMDALL_AMP_LOGS}
    :FOR  ${index}  IN RANGE  ${iterations}
    \  Sleep  12s
    \  ${out}  ${filtered_count} =  Filter Log  ${HEIMDALL_AMP_LOGS}  ${baseline}
    \  Log  Filtered Entries From Log(${HEIMDALL_AMP_LOGS}):\n ${out}
    \  @{value} =  Run Keyword And Ignore Error  _No Amp Message  ${sha256}  ${out}
    \  Run Keyword If  '@{value}[0]'=='FAIL'  Exit For Loop
    Run Keyword If  '@{value}[0]'=='FAIL'  Fail  File(SHA256::${sha256}) amp message was found

_No Amp Message
    [Arguments]  ${sha256}  ${out}
    Should Not Contain  ${out}  File SHA256[${sha256}] successfully uploaded to the VRT server
    Should Not Contain  ${out}  File SHA256[${sha256}] is already uploaded
    Should Not Contain  ${out}  File uploaded for analysis. SHA256: ${sha256}
    Should Not Contain  ${out}  Sandbox status event received
    Should Not Contain  ${out}  Sandbox file analysis complete

Check Access Logs Blocked
    [Arguments]  ${url}  ${out}
    Should Match  ${out}  *TCP_*/403*
    Should Contain  ${out}  ${url}

Check Access Logs Success
    [Arguments]  ${url}  ${out}
    Should Contain  ${out}  TCP_MISS/200
    Should Contain  ${out}  ${url}

Check Access Logs Unscannable
    [Arguments]  ${url}  ${out}  ${sha256}
    Log  ${out}
    ${pattern1} =  Set Variable  *TCP_MISS/200*${url}*${sha256}",4*
    ${line} =  Get Lines Matching Pattern  ${out}  ${pattern1}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}

Check Amp Request
    [Arguments]  ${log}  ${sha256}
    Log  ${log}
    ${pattern1} =  Set Variable  *AMP Query Request, FileType??? SHA256?${sha256}*
    ${pattern2} =  Set Variable  *Found SHA256: - SHA256::${sha256}*
    Log  ${pattern1}
    Log  ${pattern2}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern1}
    Should Not Be Empty  ${line}  msg=Expected request not found
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern2}
    Should Not Be Empty  ${line}  msg=Expected request not found

Check Amp Response
    [Documentation]  ${source} has two possible values:Cloud and Cache
    [Arguments]  ${log}  ${sha256}  ${disposition}=1  ${source}=Cloud  ${score}=*  ${spy_name}=*  ${action}=?
    Log  ${log}
    ${pattern} =  Set Variable  *AMP Query Response?${source}?, SHA256?${sha256}* disposition?${disposition}? score?${score}? SpyName?${spy_name}? action?${action}*
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern}
    Should Not Be Empty  ${line}  msg=Expected response not found

Check libclamav preclass upload
    [Arguments]  ${log}  ${sha256}
    Log  ${log}
    ${pattern1} =  Set Variable  *preclass_type=2*
    Log  ${pattern1}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern1}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern2} =  Set Variable  *File SHA256?${sha256}*is enqueued to preclassification Q*
    Log  ${pattern2}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern2}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern3} =  Set Variable  *Preclassification scan did not return CL_VIRUS for file SHA256?${sha256}*
    Log  ${pattern3}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern3}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}

Check tgcs preclass upload
    [Arguments]  ${log}  ${sha256}
    Log  ${log}
    ${pattern1} =  Set Variable  *preclass_type=4*
    Log  ${pattern1}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern1}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern2} =  Set Variable  *File SHA256?${sha256}*successfully uploaded to the VRT server*
    Log  ${pattern2}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern2}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}

Check libclamav tgcs preclass upload
    [Arguments]  ${log}  ${sha256}
    Log  ${log}
    ${pattern1} =  Set Variable  *preclass_type=2*
    Log  ${pattern1}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern1}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern2} =  Set Variable  *File SHA256?${sha256}*is enqueued to preclassification Q*
    Log  ${pattern2}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern2}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern3} =  Set Variable  *File SHA256?${sha256}*infected with virus or active macro*
    Log  ${pattern3}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern3}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern4} =  Set Variable  *File SHA256?${sha256}*successfully uploaded to the VRT server*
    Log  ${pattern4}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern4}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}

Check File Not Configured for Upload
    [Arguments]  ${log}  ${sha256}
    Log  ${log}
    ${pattern1} =  Set Variable  *upload_reason*File type is not configured for sandboxing*sha256*${sha256}*UNSCANNABLE*
    Log  ${pattern1}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern1}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}

Check File size is out of bounds
    [Arguments]  ${log}  ${sha256}
    Log  ${log}
    ${pattern1} =  Set Variable  *upload_reason*File size is out of bounds*sha256*${sha256}*UNSCANNABLE*
    Log  ${pattern1}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern1}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}

Check FA Error
    [Arguments]  ${log}  ${sha256}
    Log  ${log}
    ${pattern1} =  Set Variable  *upload_reason*Generic\/Unknown Error*sha256*${sha256}*UNSCANNABLE*
    Log  ${pattern1}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern1}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}

Check FA Local Queue Error
    [Arguments]  ${log}
    Log  ${log}
    ${pattern1} =  Set Variable  *upload_reason*Local analysis queue full*UNSCANNABLE*
    Log  ${pattern1}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern1}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}

Check AMP Update
    [Arguments]  ${log}  ${UPDATE_SERVER}
    Log  ${log}
    ${pattern1} =  Set Variable  *amp signalling new update*
    Log  ${pattern1}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern1}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern2} =  Set Variable  *amp started downloading files*
    Log  ${pattern2}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern2}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern3} =  Set Variable  *amp beginning download of remote file*${UPDATE_SERVER}*amp_client*
    Log  ${pattern3}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern3}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern4} =  Set Variable  *amp successfully downloaded file*amp_client*
    Log  ${pattern4}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern4}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern5} =  Set Variable  *amp applying file*amp_client*
    Log  ${pattern5}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern5}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern6} =  Set Variable  *amp beginning download of remote file*${UPDATE_SERVER}*preclass.cvd*
    Log  ${pattern6}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern6}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern7} =  Set Variable  *amp applying file*preclass.cvd*
    Log  ${pattern7}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern7}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern8} =  Set Variable  *amp restarting amp*
    Log  ${pattern8}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern8}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern9} =  Set Variable  *amp updating the client manifest*
    Log  ${pattern9}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern9}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}
    ${pattern10} =  Set Variable  *amp update completed*
    Log  ${pattern10}
    ${line} =  Get Lines Matching Pattern  ${log}  ${pattern10}
    Should Not Be Empty  ${line}  msg=Expected request not found
    Log  ${line}


Retrieve Client GUI ID Advanced
    Click Element  xpath=.//*[@id='rep_arrow_closed']  dont_wait
    ${out}=  Get Text  ${adv_client_gui_id_loc}
    Set Suite Variable  ${FILEREP_CLIENT_PRE_ID}  ${out}

Retrieve VRT Client GUI ID Advanced
    Click Element  xpath=${analysis_advanced_link_loc}  dont_wait
    ${out}=  Get Text  ${vrt_adv_client_gui_id_loc}
    Set Suite Variable  ${VRT_CLIENT_PRE_ID}  ${out}

Retrieve Client GUI ID
    ${out}=  Get Text  ${client_gui_id_loc}
    Set Suite Variable  ${FILEREP_CLIENT_PRE_ID}  ${out}

Get Client Gui Id
    Navigate To  Security Services  Anti-Malware and Reputation
    Click Button  Edit Global Settings...
    Wait Until Page Contains Element  ${advanced_link_loc}  30s
    Click Element  ${advanced_link_loc}  don't wait
    ${status}  ${msg}  Run Keyword And Ignore Error  Page Should Contain Element  ${rep_advanced_link_loc}
    Run Keyword If  '${status}' == 'PASS'  Retrieve Client GUI ID Advanced
    Run Keyword Unless  '${status}' == 'PASS'  Retrieve Client GUI ID 
    ${id} =  Replace String  ${FILEREP_CLIENT_PRE_ID}   -   ${EMPTY}
    [Return]  ${id}

Get VRT Client Gui Id
    Navigate To  Security Services  Anti-Malware and Reputation
    Click Button  Edit Global Settings...
    Wait Until Page Contains Element  ${advanced_link_loc}  30s
    Click Element  ${advanced_link_loc}  don't wait
    ${status}  ${msg}  Run Keyword And Ignore Error  Page Should Contain Element  ${analysis_advanced_link_loc}
    Run Keyword If  '${status}' == 'PASS'  Retrieve VRT Client GUI ID Advanced
    Run Keyword Unless  '${status}' == 'PASS'  Retrieve Client GUI ID

Set Amp Verdict Updates For File
    [Arguments]  ${sha256}  ${gui_id}  ${disposition}=2
    ${out} =  Run Command On Cloud Server  echo "${gui_id},${sha256},${disposition}" | /opt/sourcefire/retro/bin/retro ${amp_add_arg} -r
    Log  ${out}
    ${out} =  Run Command On Cloud Server  /opt/sourcefire/retro/bin/retro ${amp_add_arg} -i ${gui_id}
    Log  ${out}

Run On Cloud Server
    [Arguments]  ${cmd}  ${host}=${amp_cloud_server}  ${user}=wsa_test
    Run  chmod 600 ${pk_for_amp_cloud_server}
    ${out} =  Run  ssh -o StrictHostKeychecking=no ${user}@${host} "${cmd}"
    [Return]  ${out}

Check File Downloaded
    [Arguments]  ${url}  ${output_filename}  ${timeout}=90
    ${file_path} =  Set Variable  /tmp/${output_filename}
    Run  rm -rf ${file_path}
    ${baseline_amplog} =  Filter Log Create Baseline  ${HEIMDALL_AMP_LOGS}
    Send HTTP Request And Check Logs
    ...  url=${url}
    ...  dut_proxy=${use_interface}:3128
    ...  timeout=${timeout}
    ...  log_regexp=.*${CLIENT_IP}.*200.*${url}.*
    ...  output=${file_path}
    Sleep  ${timeout}s
    ${filtered_lines_amplog}  ${filtered_count} =  Filter Log  ${HEIMDALL_AMP_LOGS}  ${baseline_amplog}
    Log  Filtered Entries From Log(${HEIMDALL_AMP_LOGS}):\n ${filtered_lines_amplog}
    Should Exist  ${file_path}
    [Return]  ${file_path}  ${filtered_lines_amplog}

Check File Not Downloaded
    [Arguments]  ${url}  ${output_filename}  ${original_md5}  ${timeout}=10
    ${file_path} =  Set Variable  /tmp/${output_filename}
    Run  rm -rf ${file_path}
    ${baseline_amplog} =  Filter Log Create Baseline  ${HEIMDALL_AMP_LOGS}
    Send HTTP Request And Check Logs
    ...  url=${url}
    ...  dut_proxy=${use_interface}:3128
    ...  timeout=${timeout}
    ...  log_regexp=.*${CLIENT_IP}.*403.*${url}.*
    ...  output=${file_path}
    Sleep  ${timeout}s
    ${filtered_lines_amplog}  ${filtered_count} =  Filter Log  ${HEIMDALL_AMP_LOGS}  ${baseline_amplog}
    Log  Filtered Entries From Log(${HEIMDALL_AMP_LOGS}):\n ${filtered_lines_amplog}
    ${md5} =  Get File Md5  ${file_path}
    Should Not Be Equal As Strings  ${md5}  ${original_md5}
    [Return]  ${filtered_lines_amplog}

Check File Downloaded Via Ftp
    [Arguments]  ${url}  ${output_filename}  ${timeout}=10
    ${file_path} =  Set Variable  /tmp/${output_filename}
    Run  rm -rf ${file_path}
    ${baseline_amplog} =  Filter Log Create Baseline  ${HEIMDALL_AMP_LOGS}
    Send HTTP Request And Check Logs
    ...  url=${url}
    ...  timeout=${timeout}
    ...  log_regexp=.*${CLIENT_IP}.*200.*${url}.*
    ...  output=${file_path}
    Sleep  ${timeout}s
    ${filtered_lines_amplog}  ${filtered_count} =  Filter Log  ${HEIMDALL_AMP_LOGS}  ${baseline_amplog}
    Log  Filtered Entries From Log(${HEIMDALL_AMP_LOGS}):\n ${filtered_lines_amplog}
    Should Exist  ${file_path}
    [Return]  ${file_path}  ${filtered_lines_amplog}

Check File Not Downloaded Via Ftp
    [Arguments]  ${url}  ${output_filename}  ${original_md5}  ${timeout}=10
    ${file_path} =  Set Variable  /tmp/${output_filename}
    Run  rm -rf ${file_path}
    ${baseline_amplog} =  Filter Log Create Baseline  ${HEIMDALL_AMP_LOGS}
    Send HTTP Request And Check Logs
    ...  url=${url}
    ...  timeout=${timeout}
    ...  log_regexp=.*${CLIENT_IP}.*403.*${url}.*
    ...  output=${file_path}
    Sleep  ${timeout}s
    ${filtered_lines_amplog}  ${filtered_count} =  Filter Log  ${HEIMDALL_AMP_LOGS}  ${baseline_amplog}
    Log  Filtered Entries From Log(${HEIMDALL_AMP_LOGS}):\n ${filtered_lines_amplog}
    ${md5} =  Get File Md5  ${file_path}
    Should Not Be Equal As Strings  ${md5}  ${original_md5}
    [Return]  ${filtered_lines_amplog}

Check File Uploaded
    [Arguments]  ${url}  ${sha256}  ${timeout}=120
    ${baseline_amplog} =  Filter Log Create Baseline  ${HEIMDALL_AMP_LOGS}
    Send HTTP Request And Check Logs
    ...  url=${url}
    ...  dut_proxy=${use_interface}:3128
    ...  timeout=${timeout}
    ...  log_regexp=.*${CLIENT_IP}.*200.*${url}.*
    Check Amp Upload Logs  ${sha256}  ${baseline_amplog}
    ${filtered_lines_amplog}  ${filtered_count} =  Filter Log  ${HEIMDALL_AMP_LOGS}  ${baseline_amplog}
    Log  Filtered Entries From Log(${HEIMDALL_AMP_LOGS}):\n ${filtered_lines_amplog}
    Should Not Contain  ${filtered_lines_amplog}  File SHA256[${sha256}] is already uploaded
    [Return]  ${filtered_lines_amplog}

Check File Not Uploaded
    [Arguments]  ${url}  ${sha256}  ${timeout}=120
    ${baseline_amplog} =  Filter Log Create Baseline  ${HEIMDALL_AMP_LOGS}
    Send HTTP Request And Check Logs
    ...  url=${url}
    ...  dut_proxy=${use_interface}:3128
    ...  timeout=${timeout}
    ...  log_regexp=.*${CLIENT_IP}.*200.*${url}.*
    Check Amp No Upload Logs  ${sha256}  ${baseline_amplog}
    ${filtered_lines_amplog}  ${filtered_count} =  Filter Log  ${HEIMDALL_AMP_LOGS}  ${baseline_amplog}
    Log  Filtered Entries From Log(${HEIMDALL_AMP_LOGS}):\n ${filtered_lines_amplog}
    [Return]  ${filtered_lines_amplog}

Check File Not Uploaded In PUB
    [Arguments]  ${url}  ${sha256}  ${timeout}=120
    ${baseline_amplog} =  Filter Log Create Baseline  ${PUB_AMP_LOGS}
    Send HTTP Request And Check Logs
    ...  url=${url}
    ...  dut_proxy=${use_interface}:3128
    ...  timeout=${timeout}
    ...  log_regexp=.*${CLIENT_IP}.*200.*${url}.*
    Check PUB Amp No Upload In Logs  ${sha256}  ${baseline_amplog}
    ${filtered_lines_amplog}  ${filtered_count} =  Filter Log  ${PUB_AMP_LOGS}  ${baseline_amplog}
    Log  Filtered Entries From Log(${PUB_AMP_LOGS}):\n ${filtered_lines_amplog}
    [Return]  ${filtered_lines_amplog}

Clear AMP Cache
    Run On Dut  /data/bin/heimdall_svc -r amp
    Sleep  20s

Set Amp Log Level
    [Arguments]  ${log_level}=DEBUG
    ${filtered_lines}  ${filtered_count} =  Filter Data  ${AMP_CFG_FILE}
    ...  match_patterns=-E 'sdk_debug_level =.*${log_level}'
    Run Keyword If  ${filtered_count}==0
    ...  _Edit Amp Log Level  ${log_level}

Set File Upload Threshold
    [Arguments]  ${threshold}=99
    ${filtered_lines}  ${filtered_count} =  Filter Data  ${AMP_CFG_FILE}
    ...  match_patterns=-E 'analysis_file_upload_threshold =.*${threshold}'
    Run Keyword If  ${filtered_count}==0
    ...  _Edit File Upload Threshold  ${threshold}

Set Available RAM
    [Arguments]  ${bytes}=33554432
    ${filtered_lines}  ${filtered_count} =  Filter Data  ${AMP_INI_FILE}
    ...  match_patterns=-E 'available_ram =.*${bytes}'
    Run Keyword If  ${filtered_count}==0
    ...  _Edit File Available RAM  ${bytes}

Set Analysis Query Interval
    [Arguments]  ${time}=1800
    ${filtered_lines}  ${filtered_count} =  Filter Data  ${AMP_CFG_FILE}
    ...  match_patterns=-E 'analysis_query_interval =.*${time}'
    Run Keyword If  ${filtered_count}==0
    ...  _Edit Analysis Query Interval  ${time}

_Edit File Upload Threshold
    [Arguments]  ${threshold}
    Run On Dut  sed -i -e 's/analysis_file_upload_threshold =.\\{1,\\}/analysis_file_upload_threshold = (1,0,"","",${threshold})"/' ${AMP_CFG_FILE}
    Run On Dut  /data/bin/heimdall_svc -r thirdparty
    Run On Dut  /data/bin/heimdall_svc -r amp
    Sleep  20s

Disable Amp Cache
    Run On Dut  sed -i -e 's/rep_cache_size = \(1,0,\"\",\"\",1\)/rep_cache_size = \(1,0,\"\",\"\",0\)' ${AMP_CFG_FILE}
    Run On Dut  /data/bin/heimdall_svc -r thirdparty
    Run On Dut  /data/bin/heimdall_svc -r amp
    Sleep  20s

_Edit Amp Log Level
    [Arguments]  ${log_level}
    Run On Dut  sed -i -e 's/sdk_debug_level =.\\{1,\\}/sdk_debug_level = (1,0,"","","${log_level}")/' ${AMP_CFG_FILE}
    Run On Dut  /data/bin/heimdall_svc -r thirdparty
    Run On Dut  /data/bin/heimdall_svc -r amp
    Sleep  20s

_Edit File Available RAM
    [Arguments]  ${bytes}
    Run On Dut  sed -i -e 's/available_ram = .\\{1,\\}/available_ram = ${bytes}/' ${AMP_INI_FILE}
    Run On Dut  /data/bin/heimdall_svc -r thirdparty
    Run On Dut  /data/bin/heimdall_svc -r amp
    Wait Until Keyword Succeeds  300s  10s  _Should Exist On Dut  ${HEIMDALL_AMP_LOGS}

_Should Exist On Dut
    [Arguments]  ${path}
    ${out} =  Run On Dut  ls -1 ${path} | wc -l
    Should Contain  ${out}  1

_Edit Analysis Query Interval
    [Arguments]  ${time}
    Run On Dut  sed -i -e 's/analysis_query_interval =.\\{1,\\}/analysis_query_interval = (1,0,"","","${time}")/' ${AMP_CFG_FILE}
    Run On Dut  /data/bin/heimdall_svc -r thirdparty
    Run On Dut  /data/bin/heimdall_svc -r amp
    Sleep  20s
