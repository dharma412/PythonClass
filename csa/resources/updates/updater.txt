# $Id: //prod/main/sarf_centos/resources/updates/updater.txt#2 $
# $DateTime: 2019/06/03 22:56:07 $
# $Author: revlaksh $

*** Settings ***
Variables  constants.py
Resource   wsa/global.txt
*** Variables ***
${UPDATE_COMPONENT}                     avc_signatures
${UPDATE_FILES_URL}                     http://install.eng/pub/${UPDATE_COMPONENT}/
${AVC_SIGNATURES_UPDATE_PATH}           avc/1.0.0/dat/default
${SOPHOS_UPDATE_PATH}                   sophos/libsavi
${TIMEZONES_UPDATE_PATH}                timezones/1.0/zoneinfo/default
${TRUSTEDROOT_UPDATE_PATH}               trusted_root/1.0.0/trustedca.pem/default
${UPDATE_PATH}                          ${AVC_SIGNATURES_UPDATE_PATH}
${UPDATE_LOCAL_PATH}                    /tmp
${RPC_CLI_PATH}                         /usr/local/ironport/updater_tools/bin/
${MD5}                                  .md5
${TAR}                                  .tar

*** Keywords ***
Check Update Version On Update Server And Generate If Needed
    [Documentation]  If variable ${GENERATE_NEW_UPDATE} set to 'YES' then keyword checks what version is stored on update server:\n
    ...  if update version is the same as we expected than generation of new update is skipped,\n
    ...  if update version differs than generation of new update will be started.\n
    ...  Current update version on update server will be stored in ${UPDATE_SERVER_UPDATE_VERSION} variable.\n
    Login To Updater  ${update_server_address}  ${update_server_user}  ${update_server_pass}
    ${UPDATE_SERVER_UPDATE_VERSION}=  SSHLibrary.Execute Command     tail -n 1 /usr/local/ironport/updates/${UPDATE_PATH}/versions | awk '{print $2}'
    Set Suite Variable  ${UPDATE_SERVER_UPDATE_VERSION}  ${UPDATE_SERVER_UPDATE_VERSION}
    Log  ${UPDATE_SERVER_UPDATE_VERSION}
    Close Connection
    Run Keyword If   "${UPDATE_SERVER_UPDATE_VERSION}" != "${UPDATE_NAME}"  Generate New Update
Generate New Update
    Login To Updater  ${update_server_address}  ${update_server_user}  ${update_server_pass}
    Get Updates From Server  ${update_file_name}
    Generate Update  ${update_file_name}  ${update_uid}  ${updater_cli_user}  ${updater_cli_pass}
    Close Connection

Remove Component Update
    [Documentation]  Remove update files
    [Arguments]  ${update_file_name}=${UPDATE_NAME}
    ...  ${update_server_address}=${UPDATE_SERVER}
    ...  ${update_server_user}=testuser
    ...  ${update_server_pass}=ironport
    ...  ${updater_cli_user}=admin
    ...  ${updater_cli_pass}=ironport
    ...  ${update_uid}=${UPDATE_PATH}
    Login To Updater  ${update_server_address}  ${update_server_user}  ${update_server_pass}
    Run Keyword If  "${UPDATE_SERVER_UPDATE_VERSION}" != "${UPDATE_NAME}"  Remove Update Test Files  ${update_file_name}
    Run Keyword If  "${UPDATE_SERVER_UPDATE_VERSION}" != "${UPDATE_NAME}"  Remove Update From Updater  ${update_uid}  ${updater_cli_user}  ${updater_cli_pass}
    Set SSHLib Prompt  ${EMPTY}
    Close Connection
    Sleep  3s

Login To Updater
    [Documentation]  Login to update server
    [Arguments]  ${update_server_address}  ${user}  ${pass}
    Set SSHLib Timeout  60s
    Set SSHLib Prompt  \$
    Open Connection  ${update_server_address}
    Login  ${user}  ${pass}

Print Newline Characters
    [Documentation]  Print new line character n times and return last output
    [Arguments]  ${n}=1
    :FOR  ${index}  IN RANGE  ${n}
    \  Write Bare  \n
    \  ${out}=  Read Until Prompt
    [Return]  ${out}

Write To CLI And Return Output
    [Documentation]  Write command to CLI and return output
    [Arguments]  ${command}
    Write  ${command}
    ${out}=  Read Until Prompt
    [Return]  ${out}

Login To Updater CLI
    [Documentation]  Login to updater console
    [Arguments]  ${user}  ${pass}
    Write To CLI And Return Output  cd ${RPC_CLI_PATH}
    Set SSHLib Prompt  >
    Write To CLI And Return Output  sudo ./rpc_cli.sh
    Print Newline Characters  2
    Write To CLI And Return Output  ${user}
    Write To CLI And Return Output  ${pass}

Generate Update
    [Documentation]  Generate update on update server
    [Arguments]  ${file}  ${update_uid}  ${updater_cli_user}  ${updater_cli_pass}
    ${md5_hash}=  Write To CLI And Return Output  cat ${file}${MD5}
    ${actual_md5}  ${other}=  Split String From Right  ${md5_hash}  \r  1
    ${dir}=  Write To CLI And Return Output  pwd
    ${actual_dir}  ${other}=  Split String From Right  ${dir}  \r  1
    Login To Updater CLI  ${updater_cli_user}  ${updater_cli_pass}
    Write To CLI And Return Output  files.upload_nfs
    Write To CLI And Return Output  ${update_uid}
    Write To CLI And Return Output  ${MY_TIMESTAMP}
    Write To CLI And Return Output  ${actual_md5}
    Write To CLI And Return Output  ${actual_dir}/${file}${TAR}
    Write To CLI And Return Output  ${UPDATE_NAME}
    Print Newline Characters  3
    Set SSHLib Prompt  \$
    Write To CLI And Return Output  exit
Get Updates From Server
    [Documentation]  Get updates from http://install.eng/pub/${UPDATE_COMPONENT}/
    [Arguments]  ${update_file_name}
    Write To CLI And Return Output  cd ${UPDATE_LOCAL_PATH}
    Write To CLI And Return Output  wget ${UPDATE_FILES_URL}${update_file_name}${TAR}
    Write To CLI And Return Output  wget ${UPDATE_FILES_URL}${update_file_name}${MD5}
    #${out}=  Write To CLI And Return Output  ls
    ${out}=  Execute Command  ls
    Should Contain  ${out}  ${update_file_name}${TAR}
    Should Contain  ${out}  ${update_file_name}${MD5}

Remove Update From Updater
    [Documentation]  Remove update from update server
    [Arguments]  ${update_uid}  ${updater_cli_user}  ${updater_cli_pass}
    Login To Updater CLI  ${updater_cli_user}  ${updater_cli_pass}
    Write To CLI And Return Output  files.delete
    ${out}=  Write To CLI And Return Output  ${update_uid}/${MY_TIMESTAMP}
    Should Contain  ${out}  Success
    Set SSHLib Prompt  \$
    Write To CLI And Return Output  exit

Remove Update Test Files
    [Arguments]  ${update_file_name}
    Write To CLI And Return Output  rm -f ${UPDATE_LOCAL_PATH}/${update_file_name}${MD5}
    Write To CLI And Return Output  rm -f ${UPDATE_LOCAL_PATH}/${update_file_name}${TAR}

Go To Services ${service}
    [Documentation]  Open services
    Mouse Over  xpath=//a[@href="#security_services"]
    Click Link  xpath=//div[@id="security_services"]//a[text()="${service}"]

Go To Web Security Manager ${service}
    [Documentation]  Open services
    Mouse Over  xpath=//a[@href="#web_security_manager"]
    Click Link  xpath=//div[@id="web_security_manager"]//a[text()="${service}"]

Check Updater Logs
    [Arguments]  ${timeout}  ${string}
    ${matches}  ${result} =  Log Search  ${string}
    ...  search_path=/data/pub/updater_logs/updater_log.current
    ...  timeout=${timeout}
    Should Be True  ${matches} > 0

Verify Client Manifest Post Upgrade
    Check Updater Logs  30  Debug: Acquiring dynamic manifest from stage-stg-updates.ironport.com:443
    Check Updater Logs  30  .*client_manifest version.*
    Check Updater Logs  30  .*Starting manual update.*
    Check Updater Logs  30  .*Acquiring dynamic manifest.

Verify Server Manifest Post Upgrade
    Check Updater Logs  30  .*server_manifest version.*

