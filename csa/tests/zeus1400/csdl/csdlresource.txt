# $Id: //prod/main/sarf_centos/tests/zeus1350/csdl/csdlresource.txt#8 $
# $Date: 2020/06/21 $
# $Author: mrmohank $

*** Settings ***
Library      Collections
Resource     sma/global_sma.txt
Resource     sma/esasma.txt
Resource     regression.txt

*** Variables ***
@{default_password_change_options}      Cisco123#  Cisco123!  Cisco123@  Cisco123$
${error_msg_morelink}                   //span[text()='more']
${error_message_more_popup}             //div[@class='bd']
${nmap_install_command}                 sudo yum -y install nmap
${nmap_command_host_timeout}            1200
${nmap_yum_list_installed}              sudo yum list installed |grep nmap

*** Keywords ***
CSDL Suite Setup
    Set Appliance Under Test to SMA
    global_sma.DefaultTestSuiteSetup
    Run keyword and ignore error  Log Out Of Dut
    ${SMA_IP}=  Get Host IP By Name   ${SMA}
    Set Suite variable  ${SMA_IP}
    Set Suite variable  ${SQ_USER}  ${DUT_ADMIN}
    Set Suite variable  ${SQ_USER_PASSWORD}  ${DUT_ADMIN_SSW_PASSWORD}

#    ${duts}=  Set Variable  ${DUT_IDS}
#    @{appliances}=  Split String  ${duts}
#    Set Suite Variable  @{appliances}
#    Set Suite Variable  ${appliance}  ${SMA}
#    Set Aliases For Appliance Libraries
#    ${type}  Get Substring   ${SMA}  0   3
#    ${product}=   Set Variable If  '${type}'=='SMA'  _sma   ${EMPTY}
#    Set Suite Variable  ${DUT_TYPE}  ${type}
##    Line to handle Multiple SMA libraries to be added for future scripts- As discussed with Shini
#    ${out}  Set Library Search Order  ${SMA}GuiLibrary ${SMA}CliLibrary
#    ...  SMAUtilsLibrary  ${SMA}UtilsLibrary  global${product}  ssw${product}  SSHLibrary
#    ${is_restricted}=  Is Admin Cli Restricted
#    Run Keyword If  ${is_restricted}
#    ...  Passwd
#    ...  old_pwd=${DUT_ADMIN_PASSWORD}
#    ...  new_pwd=${DUT_ADMIN_TMP_PASSWORD}
#    Start Cli Session If Not Open
#    ${output}=  Show License
#    ${status}  ${value}  Run Keyword And Ignore Error  Should Contain  ${output}  No License Installed
#    Run Keyword If  '${status}' == 'PASS'
#    ...  global_sma.Load License From File
#    run keyword and ignore error  Passwd  ${DUT_ADMIN_TMP_PASSWORD}  ${DUT_ADMIN_SSW_PASSWORD}
#    Commit
#    Selenium Login
#    Run keyword and ignore error  Log Out Of Dut
#    ${SMA_IP}=  Get Host IP By Name   ${SMA}
#    Set Suite variable  ${SMA_IP}
#    Set Suite variable  ${SQ_USER}  ${DUT_ADMIN}
#    Set Suite variable  ${SQ_USER_PASSWORD}  ${DUT_ADMIN_SSW_PASSWORD}

CSDL Suite Teardown
    DefaultTestSuiteTeardown

Connect to SMA
    [Arguments]  ${user}  ${password}
    Open Connection  ${SMA}
    Set SSHLib Timeout  60s
    Run keyword if  '${user}' == '${RTESTUSER}'  Set SSHLib Prompt  ]
    ...  ELSE
    ...  Set SSHLib Prompt  >
    Login  ${user}  ${password}

Enter option ${option} and read
    Write  ${option}
    Sleep  1
    ${out}=  Read
    [Return]  ${out}

#This keyword shall be available for now. To be removed later if not used -As discussed with Shini.
Enter option and wait for prompt
    [Arguments]  ${option}  ${prompt}
    Write  ${option}
    ${out}=  Read Until Prompt
    [Return]  ${out}

#This keyword shall be available for now. To be removed later if not used -As discussed with Shini.
Enter option and wait till expected condition
    [Arguments]   ${option}  ${expected}
    Write  ${option}
    ${out}=  Read Until  expected=${expected}
    [Return]  ${out}

Enable Spam Quarantine On SMA
    [Arguments]  ${commit}=${True}
    Spam Quarantine Enable
    ...  interface=Management
    ...  port=6025
    Run Keyword If  ${commit}  Commit Changes

Launch SPAM Quarantine portal
    [Arguments]  ${user}  ${password}
    Go To Euq Gui  ${user}  ${password}
    Run keyword and ignore error  Log Out Of Dut

Login To Spam Quarantine
    [Arguments]  ${user}=${SQ_USER}
    ...  ${password}=${SQ_USER_PASSWORD}
    Log Into DUT  user=${user}  password=${password}

Login to DUT with invalid password and check wrong password error
     [Arguments]  ${user}  ${password}  ${attempt}
     FOR    ${count}    IN RANGE  0  ${attempt}
     Run keyword and ignore error  Login To DUT  ${user}  ${password}
     Page Should Contain  Invalid username or passphrase.
     END

Login to SPAM Quarantine with invalid password and check wrong password error
     [Arguments]   ${user}  ${password}  ${attempt}
     Log  ${attempt}
     FOR    ${count}    IN RANGE  0  ${attempt}
     Run keyword and ignore error  Login To Spam Quarantine  user=${user}  password=${password}
     Page Should Contain  Invalid username or passphrase.
     END

Login to DUT with invalid password and check multiple login attempt error
     [Arguments]   ${user}  ${password}
     Run keyword and ignore error  Login To DUT  ${user}   ${password}
     Page Should Contain  Too many login attempts. Please try after sometime.

Login to DUT with valid password and check multiple login attempt error
     [Arguments]  ${user}  ${password}
     Run keyword and ignore error  Login To DUT  ${user}   ${password}
     Page Should Contain  Too many login attempts. Please try after sometime.

Login to SPAM Quarantine with invalid password and check multiple login attempt error
    [Arguments]  ${user}  ${wrongpassword}
    Run keyword and ignore error  Login To Spam Quarantine  user=${user}  password=${wrongpassword}
    Page Should Contain  Too many login attempts. Please try after sometime.

Login to SPAM quarantine with valid password and check multiple login attempt error
    [Arguments]  ${user}  ${valid_password}
    Run keyword and ignore error  Login To Spam Quarantine  user=${SQ_USER}  password=${SQ_USER_PASSWORD}
    Page Should Contain  Too many login attempts. Please try after sometime

Wait for ${seconds} seconds for the password expiration time
    Sleep  ${seconds}

Login to DUT and check login is successful
    [Arguments]   ${username}   ${password}
    Login To DUT   ${username}  ${password}
    Log Out Of Dut

Login to SPAM Qurantine and check login is successful
    [Arguments]  ${user}  ${passwrd}
    Login To Spam Quarantine  user=${user}  password=${passwrd}
    Log Out Of Dut

Clear log
    [Arguments]  ${log_file}
    Run keyword and ignore error  Run On DUT  rm -rf ${log_file}

Verify logs
    [Arguments]  ${search_path}  ${pattern}

    Log  ${search_path}
    ${output} =  Log Search  ${pattern}
    ...  search_path=${search_path}
    ${count}=  Get From List  ${output}  0
    Should Be True  ${count} >= 1

Login to DUT with new user and invalid password and check wrong password error
    [Arguments]  ${user_admin}  ${wrong_password}  ${pasword_attempt}
    FOR    ${count}    IN RANGE  0  ${pasword_attempt}
    Run keyword and ignore error  Login To DUT  ${user_admin}  ${wrong_password}
    Page Should Contain  Invalid username or passphrase.
    END

Login to DUT with new user and valid password and check account error
    [Arguments]  ${user_admin}  ${pass}
    Run keyword and ignore error  Login To DUT  ${user_admin}  ${pass}
    Page Should Contain  Too many login attempts. Please try after sometime

Verify user status is
    [Arguments]  ${user}  ${required_status}
    ${users_list}=  Users Get List
    Dictionary Should Contain Key  ${users_list}  ${user}
    ${status}=  Get From Dictionary  ${users_list}  ${user}
    Should Contain  ${status}  ${required_status}

Update login attempts per minute via CLI
    [Arguments]  ${attempts_minute}
    User Config Policy Account
     ...  login_attempts_minute=${attempts_minute}

Add user in SMA
    [Arguments]   ${user}  ${name}  ${password}  ${role}
    Run keyword and ignore error  Log Out Of Dut
    Login To DUT  ${DUT_ADMIN}  ${DUT_ADMIN_SSW_PASSWORD}
    Users Add User  ${user}  ${name}  ${password}  user_role=${role}
    Commit Changes
    Run keyword and ignore error  Log Out Of Dut

Update Account locking attempts
    [Arguments]  ${lock_attempt}
    Login To DUT  ${DUT_ADMIN}  ${DUT_ADMIN_SSW_PASSWORD}
    Users Edit Account Locking  lock_failed_login=${lock_attempt}
    Commit Changes
    Run keyword and ignore error  Log Out Of Dut

Login to SMA and update Account login attempts
    [Arguments]  ${admin}  ${password}  ${attempt}
    Run keyword and ignore error  Log Out Of Dut
    Login To DUT  ${admin}  ${password}
    Users edit account locking    login_attempt=${attempt}
    Commit Changes
    Log Out Of Dut

Establish SSH Connection To
    [Arguments]  ${hostname}  ${user}  ${password}  ${prompt}
    Open Connection  ${hostname}
    Set SSHLib Timeout  60s
    Set SSHLib Prompt  ${prompt}
    Login  ${user}  ${password}

Change password via CLI
    [Arguments]  ${old_password}  ${new_password}
    Passwd   old_pwd=${old_password}  new_pwd=${new_password}

Clear and Roll over logs
    [Arguments]  ${logfile}  ${logname}
    Clear log  ${logfile}
    Run Keyword And Ignore Error  Start CLI Session If Not Open
    Roll Over Now  logname=${logname}

Login to SMA via GUI
    [Arguments]  ${sma_username}  ${sma_password}
    Run keyword and ignore error  Log Out Of Dut
    Login To DUT  ${sma_username}  ${sma_password}

Reset password to default
    [Arguments]  ${dut_password}
    ${password_list_size}=  get length  ${default_password_change_options}
    FOR    ${count}  IN RANGE  ${password_list_size}
    ${previous_password}  set variable  ${count-1}
    Run keyword if  ${count}==0   Change password via CLI  ${dut_password}  @{default_password_change_options}[${count}]
    Run keyword if  ${count}>0    Change password via CLI  @{default_password_change_options}[${previous_password}]  @{default_password_change_options}[${count}]
    END

Set inactivity timeout
    [Arguments]  ${gui_timeout}=30  ${cli_timeout}=30
    Run keyword and ignore error  Log Out Of Dut
    Login To DUT  ${DUT_ADMIN}  ${DUT_ADMIN_SSW_PASSWORD}
    Network Access Edit Settings  timeout=${gui_timeout}  cli_timeout=${cli_timeout}
    Commit Changes

Verify password change error message
    [Arguments]  ${error_message}

    Sleep  1
    Click Element  ${error_msg_morelink}
    ${text} =  Get Text  ${error_message_more_popup}
    should match regexp   ${text}  ${error_message}

Verify and install nmap package
    ${nmap_install_status}=  Check status of nmap package
    Run keyword if  '${nmap_install_status}'=='False'  Run On Host  ${CLIENT_IP}  ${TESTUSER}  ${TESTUSER_PASSWORD}   ${nmap_install_command}
    ${nmap_post_install_status}=  Check status of nmap package
    Should be True  ${nmap_post_install_status}

Check status of nmap package
    ${nmap_status}=  Run On Host  ${CLIENT_IP}  ${TESTUSER}  ${TESTUSER_PASSWORD}   ${nmap_yum_list_installed}
    ${nmap_install_information_status}=  Run keyword and return status  Should match regexp  ${nmap_status}  .*nmap.x86_64.*
    [Return]  ${nmap_install_information_status}